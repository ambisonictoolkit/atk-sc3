
CLASSMETHODS::

subsection:: Ambisonic Toolkit

METHOD:: hoaProx

Return an Array of Higher Order Ambisonic signal (HOA) near-field effect (NFE), proximity radial filter spectra collected by emphasis::Associated Legendre:: degree (ℓ).


ARGUMENT:: size
The size of the spectra to return.

ARGUMENT:: radius
Radius, in meters.

ARGUMENT:: order
Ambisonic order.

ARGUMENT:: sampleRate
Sample rate, in Hz.

ARGUMENT:: speedOfSound
Speed of sound, in meters per second.


DISCUSSION::

Offers FIR coefficients, equivalent to the IIR coefficients returned by link::Classes/NFECoeffs#-prox::. Implemented as a frequency sampling design, with coefficients returned by link::Classes/HoaOrder#-proxWeights::.


NOTE:: In most cases, users will use the high level near-field effect (NFE) pseudo-UGen: link::Classes/HoaNFProx::.::

WARNING:: The near-field effect proximity spectra contains infinite magnitudes, and is ill suited for signal processing.::


METHOD:: hoaDist

Return an Array of Higher Order Ambisonic signal (HOA) near-field effect (NFE), distance radial filter spectra collected by emphasis::Associated Legendre:: degree (ℓ).


ARGUMENT:: size
The size of the spectra to return.

ARGUMENT:: radius
Radius, in meters.

ARGUMENT:: order
Ambisonic order.

ARGUMENT:: sampleRate
Sample rate, in Hz.

ARGUMENT:: speedOfSound
Speed of sound, in meters per second.


DISCUSSION::

Offers spectra, equivalent to those returned by link::Classes/NFECoeffs#-dist::. Implemented as a frequency sampling design, with coefficients returned by link::Classes/HoaOrder#-distWeights::. See also: link::Classes/Signal#*hoaDist::.


NOTE:: In most cases, users will use the high level near-field effect (NFE) pseudo-UGen: link::Classes/HoaNFDist::.::



METHOD:: hoaCtrl

Return an Array of Higher Order Ambisonic signal (HOA) near-field effect (NFE), control radial filter spectra collected by emphasis::Associated Legendre:: degree (ℓ).


ARGUMENT:: size
The size of the spectra to return.

ARGUMENT:: encRadius
Encoding radius, in meters.

ARGUMENT:: decRadius
Decoding radius, in meters.

ARGUMENT:: order
Ambisonic order.

ARGUMENT:: sampleRate
Sample rate, in Hz.

ARGUMENT:: speedOfSound
Speed of sound, in meters per second.


DISCUSSION::

Offers spectra, equivalent to those returned by link::Classes/NFECoeffs#-ctrl::. Implemented as a frequency sampling design, with coefficients returned by link::Classes/HoaOrder#-ctrlWeights::. See also: link::Classes/Signal#*hoaCtrl::.

code::
(
~size = 4096;
~order = 2;
~sampleRate = 44100;
~speedOfSound = AtkHoa.speedOfSound;
~refRadius = AtkHoa.refRadius;

~theta = (pi/4).rand2;
~phi = (pi/4).rand2;
~radius = 1.0.rrand(2.0);

// design spectra
~hoaOrder = ~order.asHoaOrder;
~angularCoeffs = ~hoaOrder.sph(~theta, ~phi);
~radialSpectra = FreqSpectrum.hoaCtrl(~size, ~radius, ~refRadius, ~order, ~sampleRate, ~speedOfSound);

// design encoding spectra @ [ ~theta, ~phi, ~radius ]
~encodingSpectra = ~radialSpectra[~hoaOrder.l].collect({ arg spectrum, index;
	var newSpec = spectrum.deepCopy.scale(~angularCoeffs[index].abs);
	~angularCoeffs[index].isNegative({ newSpec = newSpec.neg });
	newSpec
});

// view!
~encodingSpectra.do({ arg spectra, index; (spectra.magnitude.keep((~size/2 + 1).asInteger) + -120.dbamp).ampdb.plot(format("Encoding magnitude [ %, %, % ] index: %.", ~theta.raddeg.round(1e-2), ~phi.raddeg.round(1e-2), ~radius.round(1e-2), index))})
)
::

NOTE:: In most cases, users will use the high level near-field effect (NFE) pseudo-UGen: link::Classes/HoaNFCtrl::.::


METHOD:: hoaFocl

Return an Array of Higher Order Ambisonic signal (HOA) near-field effect (NFE), focalisation radial filter spectra collected by emphasis::Associated Legendre:: degree (ℓ).


ARGUMENT:: size
The size of the spectra to return.

ARGUMENT:: radius
Radius, in meters.

ARGUMENT:: order
Ambisonic order.

ARGUMENT:: window
Angular weighting window.
table::
## code::\reg:: || Regularised footnote::S. Favrot and J. Buchholz. 2010. “Impact of Regularization of near Field Coding Filters for 2D and 3D Higher-Order Ambisonics on Auditory Distance Cues.” in Proc. of the 2nd International Symposium on Ambisonics and Spherical Acoustics. Paris.::
## code::\hp:: || (Butterworth) High Pass footnote::J. Daniel. 2003. “Spatial sound encoding including near field effect: Introducing distance coding filters and a viable, new ambisonic format,” in Proc. of the 23rd International Conference of the Audio Engineering Society.::
## code::\cos:: || Cosine footnote::J. Ahrens and S. Spors. 2009. “Spatial encoding and decoding of focused virtual sound sources,” in Proc. of the 1st Ambisonics Symposium. Paris.::
## code::\sin:: || Sine footnote::A sine function variation of the window proposed by Ahrens & Spors.::
::

ARGUMENT:: sampleRate
Sample rate, in Hz.

ARGUMENT:: speedOfSound
Speed of sound, in meters per second.


DISCUSSION::

Offers zero phase spectra; implemented as a frequency sampling design, with coefficients returned by link::Classes/HoaOrder#-foclWeights::. See also: link::Classes/Signal#*hoaFocl::.


METHOD:: hoaMultiBandFocl

Return an Array of Higher Order Ambisonic signal (HOA) filter spectra combining multi-band beamforming and near-field effect (NFE) focalisation, collected by emphasis::Associated Legendre:: degree (ℓ).


ARGUMENT:: size
The size of the spectra to return.

ARGUMENT:: radius
Radius, in meters. Set to code::nil:: to exclude focalisation.

ARGUMENT:: beamDict
A dictionary specifying beam shapes and edge frequencies.

See link::Classes/HoaOrder#Beaming%20&%20Decoder%20matching#Beaming & Decoder Matching:: and discussion below.

ARGUMENT:: dim
The number of dimensions: 2D or 3D.

ARGUMENT:: match
Matching criteria, see link::Classes/HoaOrder#Beaming%20&%20Decoder%20matching#Beaming & Decoder Matching:::
table::
## code::\amp:: || pressure (loudspeaker sum)
## code::\rms:: || spherical harmonic energy
## code::\energy:: || loudspeaker energy
::
NOTE::Prepend code::f:: to include focalisation in normalisation. E.g., code::\frms::.::

ARGUMENT:: numChans
Number of loudspeakers.

NOTE::Must be set when choosing code::match: \energy::.::


ARGUMENT:: order
Ambisonic order.

ARGUMENT:: window
Focalisation angular weighting window. See link::#*hoaFocl::.

NOTE::Ignored if strong::radius:: is set to code::nil::.::

ARGUMENT:: sampleRate
Sample rate, in Hz.

ARGUMENT:: speedOfSound
Speed of sound, in meters per second.


DISCUSSION::

Offers zero phase spectra; implemented as a frequency sampling design, with coefficients returned by link::#*logShelf:: and link::#*hoaFocl::. See also: link::Classes/Signal#*hoaMultiBandFocl::.


One band, with focalisation normalized for spherical harmonic energy.
code::
~size = 4096;
~sampleRate = 44100;

~order = 3;

// ---
// one band
~beamDict = Dictionary.with(*[
	// beams shapes
	\beamShapes-> [ \basic ],
]);

~radius = (AtkHoa.refRadius / 2);

~match = \frms;

~spectra = FreqSpectrum.hoaMultiBandFocl(~size, ~radius, beamDict: ~beamDict, match: ~match, order: ~order, sampleRate: ~sampleRate);

~spectra.do({ arg spectrum, i; (spectrum.magnitude + -120.0.dbamp).ampdb.plot("Deegree: % ".format(i), minval: -60.0, maxval: 10.0) });
::

Two bands, normalized for spherical harmonic energy, with focalisation normalized for pressure.
code::
~size = 4096;
~sampleRate = 44100;

~order = 3;

// ---
// two band
~beamDict = Dictionary.with(*[
	// beams shapes
	\beamShapes-> [ \basic, \energy ],

	// \basic: 0.0 - 1400.0 Hz
	// \energy: 2800.0 - 22050.0 Hz
	\edgeFreqs-> [ 1400.0, 2800.0 ],
]);

~radius = (AtkHoa.refRadius / 2);

~match = \rms;

~spectra = FreqSpectrum.hoaMultiBandFocl(~size, ~radius, beamDict: ~beamDict, match: ~match, order: ~order, sampleRate: ~sampleRate);

~spectra.do({ arg spectrum, i; (spectrum.magnitude + -120.0.dbamp).ampdb.plot("Deegree: % ".format(i), minval: -60.0, maxval: 10.0) });
::

Three bands, normalized for pressure, with focalisation normalized for pressure.
code::
~size = 4096;
~sampleRate = 44100;

~order = 3;

// ---
// three band
~beamDict = Dictionary.with(*[
	// beams shapes
	\beamShapes-> [ \basic, \energy, \controlled ],

	// \basic: 0.0 - 700.0 Hz
	// \energy: 1400.0 - 4000.0 Hz
	// \controlled: 8000.0 - 22050.0 Hz
	\edgeFreqs-> [ 700.0, 1400.0, 4000.0, 8000.0 ],
]);

~radius = (AtkHoa.refRadius / 2);

~match = \amp;

~spectra = FreqSpectrum.hoaMultiBandFocl(~size, ~radius, beamDict: ~beamDict, match: ~match, order: ~order, sampleRate: ~sampleRate);

~spectra.do({ arg spectrum, i; (spectrum.magnitude + -120.0.dbamp).ampdb.plot("Deegree: % ".format(i), minval: -60.0, maxval: 10.0) });
::

Three bands, normalized for spherical harmonic energy. No focalisation.
code::
~size = 4096;
~sampleRate = 44100;

~order = 3;

// ---
// three band
~beamDict = Dictionary.with(*[
	// beams shapes
	\beamShapes-> [ \basic, \energy, \controlled ],

	// \basic: 0.0 - 700.0 Hz
	// \energy: 1400.0 - 4000.0 Hz
	// \controlled: 8000.0 - 22050.0 Hz
	\edgeFreqs-> [ 700.0, 1400.0, 4000.0, 8000.0 ],
]);

~match = \rms;

~spectra = FreqSpectrum.hoaMultiBandFocl(~size, beamDict: ~beamDict, match: ~match, order: ~order, sampleRate: ~sampleRate);

~spectra.do({ arg spectrum, i; (spectrum.magnitude + -120.0.dbamp).ampdb.plot("Deegree: % ".format(i), minval: -60.0, maxval: 10.0) });
::
