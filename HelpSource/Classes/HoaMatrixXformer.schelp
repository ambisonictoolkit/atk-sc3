TITLE:: HoaMatrixXformer
summary:: Higher Order Ambisonic (HOA) matrix transformers
categories:: Libraries>Ambisonic Toolkit>Matrix & Kernel>HOA
related:: Classes/HoaXformMatrix

DESCRIPTION::
Generate matrix transformers required by the Ambisonic Toolkit's Higher Order Ambisonic (HOA) transformer, link::Classes/HoaXformMatrix::.


CLASSMETHODS::

METHOD:: newBeam
Beamform into a Higher Order Ambisonic signal (HOA).

ARGUMENT:: theta
Azimuth, in radians.

ARGUMENT:: phi
Elevation, in radians.

ARGUMENT:: beamShape
Keyword argument for beam shape. See link::Classes/HoaMatrixDecoder#Beam%20shape#discussion here::.

ARGUMENT:: order
Ambisonic order.



METHOD:: newNull
Nullform into a Higher Order Ambisonic signal (HOA).

ARGUMENT:: theta
Azimuth, in radians.

ARGUMENT:: phi
Elevation, in radians.

ARGUMENT:: beamShape
Keyword argument for beam shape. See link::Classes/HoaMatrixDecoder#Beam%20shape#discussion here::.

ARGUMENT:: order
Ambisonic order.


METHOD:: newReflect
Mirror a Higher Order Ambisonic signal (HOA).

ARGUMENT:: mirror
Keyword argument for reflection. See discussion below.

ARGUMENT:: order
Ambisonic order.

DISCUSSION::

A variety of reflection transforms are offered:

table::
## strong::keyword:: || strong::mirror::
## code::\reflect:: || Mirror across the origin. Equivalent to: code::\flip * \flop * \flap::. FOOTNOTE::HOA transform equivalent to link::Classes/FoaXformerMatrix#*newMirrorO::.::
## code::\flip:: || Mirror in the y-axis. FOOTNOTE::HOA transform equivalent to link::Classes/FoaXformerMatrix#*newMirrorY::.::
## code::\flop:: || Mirror in the x-axis. FOOTNOTE::HOA transform equivalent to link::Classes/FoaXformerMatrix#*newMirrorX::.::
## code::\flap:: || Mirror in the z-axis. FOOTNOTE::HOA transform equivalent to link::Classes/FoaXformerMatrix#*newMirrorZ::.::
## code::\CondonShortleyPhase:: || Condon-Shortley Phase. Equivalent to: code::\flip * \flop::.
## code::\origin:: || Synonym for code::\reflect::.
## code::\x:: || Synonym for code::\flop::.
## code::\y:: || Synonym for code::\flip::.
## code::\z:: || Synonym for code::\flap::.
::


METHOD:: newRotateAxis
Rotate a Higher Order Ambisonic signal (HOA) around an axis.

ARGUMENT:: axis
Keyword argument for axis of rotation. See discussion below.

ARGUMENT:: angle
Rotation angle, in radians.

ARGUMENT:: order
Ambisonic order.

DISCUSSION::

Rotation about one of the three cartesian axes are offered via these keywords:

table::
## strong::keyword:: || strong::axis of rotation::
## code::\x:: || x-axis
## code::\y:: || y-axis
## code::\z:: || z-axis
## code::\rotate:: || Synonym for code::\z::.
## code::\tilt:: || Synonym for code::\x::.
## code::\tumble:: || Synonym for code::\y::.
## code::\yaw:: || Synonym for code::\z::.
## code::\pitch:: || Synonym for code::\y::.
## code::\roll:: || Synonym for code::\x::.
::


METHOD:: newRTT
Compound rotation around the z, x and y axes, applied in sequential order: rotate, tilt, tumble.

note::
emphasis::Extrinsic::, "laboratory-fixed" axes.
::

ARGUMENT:: rotate
Rotation angle around z-axis, in radians.

ARGUMENT:: tilt
Rotation angle around x-axis, in radians.

ARGUMENT:: tumble
Rotation angle around y-axis, in radians.

ARGUMENT:: order
Ambisonic order.


METHOD:: newYPR
Compound rotation around the z, y' and x" axes: yaw, pitch, roll.

note::
Mixed emphasis::extrinsic:: (z-axis), emphasis::intrinsic:: (y' & x"-axes) rotations. This rotation differs from link::#*newRTT::, which is emphasis::extrinsic::.
::

ARGUMENT:: yaw
Rotation angle around z-axis, in radians.

ARGUMENT:: pitch
Rotation angle around y'-axis, in radians.

ARGUMENT:: roll
Rotation angle around x"-axis, in radians.

ARGUMENT:: order
Ambisonic order.


METHOD:: newRotate
Compound rotation around the cartesian axes, applied in sequential order.

note::
emphasis::Extrinsic::, "laboratory-fixed" axes.
::

ARGUMENT:: r1
Rotation angle around axis-1, in radians.

ARGUMENT:: r2
Rotation angle around axis-2, in radians.

ARGUMENT:: r3
Rotation angle around axis-2, in radians.

ARGUMENT:: axes

Individual axes are specified via the axial keywords for link::#*newRotateAxis::.

Specify order of rotations via concatenation. E.g., rotate, tilt, tumble: code::\zxy::

ARGUMENT:: order
Ambisonic order.


METHOD:: newSwapAxes
Swap two axes of a Higher Order Ambisonic signal (HOA).

ARGUMENT:: axes
Individual axes are specified via the axial keywords for link::#*newRotateAxis::.

Specify swap via concatenation. E.g., swap y-axis with z-azis: code::\yz::

ARGUMENT:: order
Ambisonic order.

SUBSECTION:: Matrix & File

METHOD:: newFromMatrix
Transform a Higher Order Ambisonic signal (HOA) via a directly designed spatial filter.

ARGUMENT:: matrix
A link::Classes/Matrix:: instance.

ARGUMENT:: order
Ambisonic order.

COPYMETHOD:: HoaMatrix, *newFromFile



INSTANCEMETHODS::
PRIVATE:: dim, initBeam, initNull, initReflect, initRotation, initSwapAxes

SUBSECTION:: Information

COPYMETHOD:: HoaMatrix, -info

COPYMETHOD:: HoaMatrix, -order

COPYMETHOD:: HoaMatrix, -set

COPYMETHOD:: HoaMatrix, -type

COPYMETHOD:: HoaMatrix, -op

COPYMETHOD:: HoaMatrix, -kind

COPYMETHOD:: HoaMatrix, -dim

COPYMETHOD:: HoaMatrix, -numChannels

COPYMETHOD:: HoaMatrix, -directions

COPYMETHOD:: HoaMatrix, -numInputs

COPYMETHOD:: HoaMatrix, -dirInputs

COPYMETHOD:: HoaMatrix, -numOutputs

COPYMETHOD:: HoaMatrix, -dirOutputs


SUBSECTION:: Matrix

COPYMETHOD:: HoaMatrix, -matrix

COPYMETHOD:: HoaMatrix, -thresh2

COPYMETHOD:: HoaMatrix, -asArray


SUBSECTION:: File handling

COPYMETHOD:: HoaMatrix, -fileName

COPYMETHOD:: HoaMatrix, -filePath

COPYMETHOD:: HoaMatrix, -fileParse

COPYMETHOD:: HoaMatrix, -writeToFile


SUBSECTION:: Analysis

METHOD:: analyzeAverage
Return an average analysis of transformer amplitude and energies.

returns::

Analysis is returned in an link::Classes/IdentityDictionary::, with the following keys:

table::
## strong::keyword:: || strong::analysis::
## code::\amp:: || pressure (virtual loudspeaker sum)
## code::\rms:: || spherical harmonic energy
## code::\energy:: || virtual loudspeaker (angular) energy
## code::\meanE:: || transformer emphasis::reduced energy::
## code::\matchWeight:: || transformer matching weights (a Dictionary)
::

The required weights for link::Classes/HoaMatrixDecoder#Gain%20match#gain matching:: are returned in the code::\matchWeight:: Dictionary:

table::
## strong::keyword:: || strong::analysis::
## code::\amp:: || match weight for pressure (virtual loudspeaker sum)
## code::\rms:: || match weight for spherical harmonic energy
## code::\energy:: || match weight for virtual loudspeaker (angular) energy
::


DISCUSSION::

Offers a convenient way to review modifications to the soundfield.

Rotation:

code::
// Axial rotation

// specify parameters & design
~axis = \z
~angle = pi/3
~order = 3
~xformer = HoaMatrixXformer.newRotateAxis(~axis, ~angle, ~order)

// analyze average - matching weights
~xformer.analyzeAverage.matchWeight
::

Beamforming:

code::
// Beamforming

// specify parameters & design
~theta = 0.0
~phi = 0.0
~beamShape = \basic
~order = 3
~xformer = HoaMatrixXformer.newBeam(~theta, ~phi, ~beamShape, ~order)

// analyze average - matching weights
~xformer.analyzeAverage.matchWeight
::


METHOD:: analyzeDirections

Return a directional analysis of modifications to the soundfield.


ARGUMENT:: directions

A single azimuth value, or an array of test directions. Specify in radians.

Rank 1 arrays return pantophonic, while rank 2 arrays return periphonic. E.g.,
code::
// 2D:
~testDirections = [ theta0, theta1, ... thetaN ];
::
code::
// 3D:
~testDirections = [ [ theta0, phi0 ], [ theta1, phi1 ], ... [ thetaN, phiN ] ];
::


returns::

Analysis is returned in an link::Classes/IdentityDictionary::, with the following keys:

table::
## strong::keyword:: || strong::analysis::
## code::\amp:: || pressure (virtual loudspeaker sum)
## code::\rms:: || spherical harmonic energy
## code::\energy:: || virtual loudspeaker energy
## code::\spreadE:: || energy spread (a Dictionary)
## code::\rV:: || emphasis::velocity localisation vector::, strong::rV:: (a Dictionary)
## code::\rE:: || emphasis::energy localisation vector::, strong::rE:: (a Dictionary)
::

Two measures of energy spread are offered in the code::\spreadE:: Dictionary:

table::
## strong::keyword:: || strong::analysis::
## code::\cos:: || roll-off to ~-3dB, in radians
## code::\hvc:: || roll-off to ~-6dB, in radians
::

Information regarding strong::rV::, the emphasis::velocity localisation vector::, is returned in the code::\rV:: Dictionary:

table::
## strong::keyword:: || strong::analysis::
## code::\magnitudes:: || vector magnitudes
## code::\directions:: || vector directions, in radians
## code::\warp:: || angle distortion from test directions, in radians
## code::\rEwarp:: || angle distortion from strong::rE::, in radians
## code::\xyz:: || strong::rV::, in cartesian coordinates
::

Similarly, information regarding strong::rE::, the emphasis::energy localisation vector::, is returned in the code::\rE:: Dictionary:

table::
## strong::keyword:: || strong::analysis::
## code::\magnitudes:: || vector magnitudes
## code::\directions:: || vector directions, in radians
## code::\warp:: || angle distortion from test directions, in radians
## code::\rVwarp:: || angle distortion from strong::rV::, in radians
## code::\xyz:: || strong::rE::, in cartesian coordinates
::


Offers detailed analysis of transformer performance.

Rotation:

code::
// Axial rotation

// specify parameters & design
~axis = \z
~angle = pi/3
~order = 3
~xformer = HoaMatrixXformer.newRotateAxis(~axis, ~angle, ~order)

//----
// analysis
~numTestDirections = 16
~testDirections = Array.regularPolygon(~numTestDirections)

// analyze
~analysis = ~xformer.analyzeDirections(~testDirections)


~analysis.amp.abs.ampdb.round(0.01)
~analysis.rms.sqrt.ampdb.round(0.01)
~analysis.energy.sqrt.ampdb.round(0.01)

~analysis.spreadE.cos.raddeg

~analysis.rV.magnitudes
~analysis.rV.directions.raddeg.round(0.1)
~analysis.rV.warp.raddeg.round(0.1)
~analysis.rV.rEwarp.raddeg.round(0.1)

~analysis.rE.magnitudes
~analysis.rE.directions.raddeg.round(0.1)
~analysis.rE.warp.raddeg.round(0.1)
::


Beamforming:

code::
// Beamforming

// specify parameters & design
~theta = 0.0
~phi = 0.0
~beamShape = \controlled
~order = 3
~xformer = HoaMatrixXformer.newBeam(~theta, ~phi, ~beamShape, ~order)

//----
// analysis
~numTestDirections = 16
~testDirections = Array.regularPolygon(~numTestDirections)

// analyze
~analysis = ~xformer.analyzeDirections(~testDirections)


~analysis.amp.abs.ampdb.round(0.01)
~analysis.rms.sqrt.ampdb.round(0.01)
~analysis.energy.sqrt.ampdb.round(0.01)

~analysis.spreadE.cos.raddeg

~analysis.rV.magnitudes
~analysis.rV.directions.raddeg.round(0.1)
~analysis.rV.warp.raddeg.round(0.1)
~analysis.rV.rEwarp.raddeg.round(0.1)

~analysis.rE.magnitudes
~analysis.rE.directions.raddeg.round(0.1)
~analysis.rE.warp.raddeg.round(0.1)
::


Nullforming:

code::
// Nullforming

// specify parameters & design
~theta = 0.0
~phi = 0.0
~beamShape = \controlled
~order = 3
~xformer = HoaMatrixXformer.newNull(~theta, ~phi, ~beamShape, ~order)

//----
// analysis
~numTestDirections = 16
~testDirections = Array.regularPolygon(~numTestDirections)

// analyze
~analysis = ~xformer.analyzeDirections(~testDirections)


~analysis.amp.abs.ampdb.round(0.01)
~analysis.rms.sqrt.ampdb.round(0.01)
~analysis.energy.sqrt.ampdb.round(0.01)

~analysis.spreadE.cos.raddeg

~analysis.rV.magnitudes
~analysis.rV.directions.raddeg.round(0.1)
~analysis.rV.warp.raddeg.round(0.1)
~analysis.rV.rEwarp.raddeg.round(0.1)

~analysis.rE.magnitudes
~analysis.rE.directions.raddeg.round(0.1)
~analysis.rE.warp.raddeg.round(0.1)
::


EXAMPLES::

TBD
