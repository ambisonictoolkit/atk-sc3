TITLE:: HoaNFProx
summary:: Higher Order Ambisonic (HOA) NFE proximity transformer
categories:: Libraries>Ambisonic Toolkit>UGens>HOA>Transformer, UGens>Multichannel>Ambisonics
related:: Classes/HoaNFDist, Classes/HoaNFCtrl, Classes/DegreeDist, Classes/DegreeProx, Classes/DegreeCtrl

DESCRIPTION::
Higher Order Ambisonic signal (HOA) near-field effect (NFE) proximity transformer.


CLASSMETHODS::

METHOD:: ar

ARGUMENT:: in
The input signal.

ARGUMENT:: order
Ambisonic order.

DISCUSSION::

link::Classes/HoaNFProx:: translates an input HOA signal where code::refRadius = AtkHoa.refRadius:: to code::refRadius = inf::.

This transform offers an HOA equivalent to link::Classes/FoaProximity:: where code::distance = AtkHoa.refRadius::, in the first order case.


NOTE::This operation emphasis::may be used:: to decode signals encoded as HOA with NFE to FOA or third party Ambisonic signal sets.::

WARNING::The near-field effect proximity transformer is inherently numerically unstable and requires the use of signal pre-conditioned input to avoid overflow. In many cases, the use of link::Classes/HoaNFCtrl:: is advised, instead.::



EXAMPLES::

subsection:: Decode from HOA1 with NFE to FOA

code::
// Inspect the ATK's speed of sound reference
"Speed of sound: % m/s".format(AtkHoa.speedOfSound);

// Inspect the ATK's reference radius
"Reference radius: % m".format(AtkHoa.refRadius);

// Inspect the ATK's channel/coefficient ordering
"Coefficient ordering: %".format(AtkHoa.ordering);

// Inspect the ATK's channel/coefficient ordering
"Coefficient normalisation: %".format(AtkHoa.normalisation);


// simple test...

// boot rt server
s.boot;

// choose Ambisonic order
~order = 1  // match FOA, first order!

// choose an outbus, if need be
~outbus = 0

// open scope
s.scope(~order.asHoaOrder.size, ~outbus);

// encoding angles
// azimuth & elevation
~theta = 0.0;
~phi = 0.0;

// explicitly set encoding radius
// i.e., radius != AtkHoa.refRadius
~encRadius = 2.0;  // > AtkHoa.refRadius
~encRadius = 1.5;  // = AtkHoa.refRadius
~encRadius = 1.0;  // < AtkHoa.refRadius


// audition
(
{
	// saw params
	var freq = 110.0;
	var gain = -12;

	var sig;
	var hoa;

	sig = Saw.ar(freq, gain.dbamp);  // saw
	// sig = SinOsc.ar(freq, mul: gain.dbamp);  // sine

	// HOA encoding, refRadius = AtkHoa.refRadius (= 1.5)
	hoa = HoaEncodeDirection.ar(sig, ~theta, ~phi, ~encRadius, ~order);  // no need to precondition sig!

	// FOA decoding, refRadius = inf
	HoaDecodeMatrix.ar(
		HoaNFProx.ar(
			HPF.ar(hoa, freq/3),  // precondition sig, i.e., "make safe" for proximity (HOA1)
			~order
		),
		HoaMatrixDecoder.newFormat(\fuma, ~order)  // from atk to fuma
	);

}.play(outbus: ~outbus)
)

// quit rt server
s.quit
::
