CLASS:: FoaEncoderMatrix
summary:: First Order Ambisonic (FOA) encoder matrices
categories:: Libraries>Ambisonic Toolkit>Matrix & Kernel>FOA
related:: Classes/FoaEncoderKernel, Classes/FoaEncode

DESCRIPTION::
Generates encoding matrices required by the Ambisonic Toolkit's first order encoder, link::Classes/FoaEncode::.

note:: The ATK matrices are required for using some of the matrix encoders. Please see link::Classes/Atk#Installation of ATK dependencies:: for instructions.::

CLASSMETHODS::

METHOD:: newOmni
Omnidirectional encoder (monophonic).

discussion:: An omnidirectional soundfield can be regarded in two ways: a soundfield with an infinite number of planewaves arriving in all directions, or a soundfield with no directions. In a well aligned, dampend studio environment, this usually sounds "in the head", while in concert hall listening usually appears as omnipresent.

To control the soundfield, link::Classes/FoaPush:: and link::Classes/FoaFocus:: can be applied to either "push" or "focus" an omnidirectional soundfield into a planewave, giving the soundfield an angle of arrival. footnote:: In combination with distance scaling, link::#*newOmni:: and link::Classes/FoaPush:: can be used to implement Menzies' "W-panning" technique. See: D. Menzies, "W-panning and O-format, tools for object spatialization," in Proceedings of the Audio Engineering Society 22nd International Conference on Virtual, Synthetic and Entertainment Audio, Espoo, Finland, 2002.::



METHOD:: newDirection
Planewave encoder (monophonic).

argument:: theta
Azimuth angle, in radians: pi to -pi

argument:: phi
Elevation angle, in radians: pi/2 to -pi/2

discussion:: This is the classic Ambisonic encoding (panning) function. SuperCollider's inbuilt link::Classes/PanB:: and the Ambisonic Toolkit's link::Classes/FoaPanB:: implement this encoder as a UGen, and provide dynamically changing strong::theta:: and strong::phi:: at the audio and control rates.



METHOD:: newStereo
Stereophonic encoder.

argument:: angle
Soundfield distortion angle, in radians: pi/2 to -pi/2

discussion:: The stereophonic signal is encoded as two planewaves. When strong::angle:: = 0, the left and right channels of the input signal arrive at code:: [90, -90] :: degrees. strong::angle:: = pi/4 distorts the arrivals to code:: [45, -45] :: degrees. strong::angle:: = pi/2, places both the left and right inputs at front centre, code:: [0, 0] :: degrees. This behaviour matches that of the Ambisonic Toolkit's first order image warping UGens: link::Classes/FoaFocus::, link::Classes/FoaZoom::, link::Classes/FoaPush::, and link::Classes/FoaPress::.
note::The authors also suggest reviewing the Super Stereo footnote::See link::https://en.wikipedia.org/wiki/Ambisonic_UHJ_format#Super_stereo:: for further information.:: encoding technique, the classic method for encoding stereophonic signals into B-format: link::Classes/FoaEncoderKernel#*newSuper:: ::

METHOD:: newQuad
Quadraphonic encoder.

discussion:: The quadraphonic signal is encoded as four planewaves arriving at code:: [ 45, 135, -135, -45 ] :: degrees. This encoding is equivalent to placing infinitely distant loudspeakers around a soundfield microphone in an anechoic chamber.



METHOD:: new5_0
5.0 encoder.

discussion:: The 5.0 signal is encoded as five planewaves arriving at code:: [ 0, 30, 110, -110, -30 ] :: degrees. This encoding is equivalent to placing infinitely distant loudspeakers around a soundfield microphone in an anechoic chamber.



METHOD:: new7_0
7.0 encoder.

discussion:: The 7.0 signal is encoded as seven planewaves arriving at code:: [ 0, 30, 90, 135, -135, -90, -30 ] :: degrees. This encoding is equivalent to placing infinitely distant loudspeakers around a soundfield microphone in an anechoic chamber.



METHOD:: newPanto
Pantophonic (2D) regular polygon encoder.

argument:: numChans
number of input channel feeds

argument:: orientation
code::'flat':: or code::'point'::

discussion:: Inputs are in anti-clockwise order. The position of the first input channel is either centre or left of centre. link::#-dirChannels:: may be used to query resulting input channel directions. This encoding is equivalent to placing infinitely distant loudspeakers around a soundfield microphone in an anechoic chamber.



METHOD:: newPeri
Periphonic (3D) dual ring, regular cylindrical encoder.

argument:: numChanPairs
Number of channel pairs. (Half the total number of input channel feeds.)

argument:: elevation
Elevation of the upper ring, measured from the origin. In radians.

argument:: orientation
code::'flat':: or code::'point'::


discussion:: Inputs are in anti-clockwise order, beginning with the top ring. The position of the first speaker is either centre or left of centre. link::#-dirChannels:: may be used to query resulting loudspeaker directions. This encoding is equivalent to placing infinitely distant loudspeakers around a soundfield microphone in an anechoic chamber.



METHOD:: newDirections
Virtual loudspeaker or microphone encoder, suitable for varied periphonic and pantophonic arrays.

argument:: directions
An array of directions of the virtual loudspeakers or microphones. Specify in radians.

Rank 1 arrays return pantophonic, while rank 2 arrays return periphonic. E.g.,
code::
// 2D:
~directions = [ theta0, theta1, ... thetaN ];
::
code::
// 3D:
~directions = [ [ theta0, phi0 ], [ theta1, phi1 ], ... [ thetaN, phiN ] ];
::

argument:: pattern
Virtual microphone pattern, code::nil::, or 0 to 1.

definitionList::
## code::nil:: || strong::directions:: specifies virtual loudspeaker positions
## 0 to 1 || strong::directions:: specifies a microphone array with patterns:
    table::
    ## strong::pattern:: || strong::microphone::
    ## 0.0 || Omni
    ## 0.5 || Cardioid
    ## (3-sqrt(3))/2 || Super-cardioid
    ## 0.75 || Hyper-cardioid
    ## 1.0 || Bi-directional
    ::
    If strong::pattern:: is an link::Classes/Array::, individual microphone patterns are specified.

    For equivalences to decoder strong::k::, please see link::Classes/FoaDecoderMatrix#decoder k::.
::


discussion:: link::#-newDirections:: is the Ambisonic Toolkit's most versatile first order encoder. Arbitrary input loudspeaker and/or microphone arrays may be specified.

code::
// Periphonic (3D) encoder, a 1/2 dome of 13 loudspeakers
// [[0, 0], [45, 0], [90, 0], [135, 0], [-180, 0], [-135, 0], [-90, 0], [-45, 0],
//  [45, 35.3], [135, 35.3], [-135, 35.3], [-45, 35.3], [0, 90]]

~directions = [[0, 0], [45, 0], [90, 0], [135, 0], [-180, 0], [-135, 0], [-90, 0],
    [-45, 0], [45, 35.3], [135, 35.3], [-135, 35.3], [-45, 35.3], [0, 90]].degrad;
~encoder = FoaEncoderMatrix.newDirections(~directions);

// inspect
~encoder.dirChannels.raddeg;
::

code::
// Periphonic (2D) encoder, 3 cardioid microphones
// See: http://www.michaelgerzonphotos.org.uk/microphones-calrecs.html
// [60, -180, -60]

~directions = [60, -180, -60].degrad;
~pattern = 0.5;
~encoder = FoaEncoderMatrix.newDirections(~directions, ~pattern);

// inspect
~encoder.dirChannels.raddeg;
::

code::
// Periphonic (2D) encoder, 1 omni and 2 cardioid microphones
// [0, 45, -45]

~directions = [0, 45, -45].degrad;
~pattern = [0, 0.5, 0.5];
~encoder = FoaEncoderMatrix.newDirections(~directions, ~pattern);

// inspect
~encoder.dirChannels.raddeg;
::


METHOD:: newZoomH2
link::http://www.zoom.co.jp/english/products/h2/##ZoomH2:: (pantophonic) encoder.

argument:: angles
Angles for front left and back left microphones, in radians. (The corresponding right microphones are mirrored across the y-axis.) Defaults to code:: [pi/3, 3/4*pi] :: .

note:: anchor::newzoomh2note:: The encoder reverses the labels for front and back of the link::http://www.zoom.co.jp/english/products/h2/##ZoomH2::. This is done so that directions are are preserved from the point of view of a field recording operator. With the link::http://www.zoom.co.jp/english/products/h2/##ZoomH2::'s display facing the operator (for ease of monitoring), sounds arriving in front of the operator will be encoded in the front of the soundfield. See also link::#newzoomdiscussion#Discussion:: below.::

argument:: pattern
Microphone pattern footnote::The default value, 0.5857, is derived from measurements made by Farina, and is a hyper-cardioid response with a zero at 135 degrees. See: link::http://pcfarina.eng.unipr.it/Public/Brahma/Zoom-H2/Polar-ZoomH2.xls:: ::, 0 to 1:

table::
## strong::pattern:: || strong::virtual microphone::
## 0.0 || Omni
## 0.5 || Cardioid
## (3-sqrt(3))/2 || Super-cardioid
## 0.75 || Hyper-cardioid
## 1.0 || Bi-directional
::

argument:: k
Post-encoding Y scalar.
note::Please see further discussion of strong::k:: link::#newzoomh2k#here::::

discussion::
anchor::newzoomdiscussion::
A four channel recording made by the link::http://www.zoom.co.jp/english/products/h2/##ZoomH2:: will be returned as two stereo .wav files named:

list::
## SRxxxF.wav
## SRxxxR.wav
::

Presuming the link::http://www.zoom.co.jp/english/products/h2/##ZoomH2:: is oriented as described link::#newzoomh2note#here::, the following illustrates correct input for the encoder:
code::
// ZoomH2 records two stereo .wav files:
//       SRxxxF.wav
//       SRxxxR.wav
// correct input for FoaEncoderMatrix.newZoomH2 is:

~in = [ SRxxxR[0], SRxxxR[1], SRxxxF[0], SRxxxF[1] ]
::

anchor::newzoomh2k::
The encoder includes a Y scalar, strong::k::, and an auditioned adjustment is usually necessary to improve the resulting image. As the link::http://www.zoom.co.jp/english/products/h2/##ZoomH2::'s polar patterns are not consistent across frequency, and the capsules are not coincident, imaging is not always consistent. Touching strong::k:: can go some way towards remedy-ing this.

note::
strong::k:: = 1.7378 is a value that has been found suitable for matching link::http://www.radio.uqam.ca/ambisonic/comparative_recording.html##Courville::'s link::http://www.zoom.co.jp/english/products/h2/##ZoomH2:: footnote:: Courville orients his ZoomH2 so that the labelled front of the device faces the front of the sound scene. This is front/back reversed as regards -newZoomH2. If you choose to encode Courville's example files, you'll need to follow with FoaMirrorX.:: and Soundfield recordings. footnote:: See: http://www.radio.uqam.ca/ambisonic/comparative_recording.html ::
::

METHOD:: newZoomH2n
A first order link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats##Ambisonic format exchange:: encoder, for use with the link::https://www.zoom-na.com/products/field-video-recording/field-recording/zoom-h2n-handy-recorder##ZoomH2n::. Encodes from AmbiX to traditional B-format. A convenience alias to  link::#*newHoa1::.


discussion::
Encoding means encoding from one Ambisonic channel componenent orderding and normalisation to that of traditional B-format. In this case, from AmbiX encoding scheme (strong::ACN:: ordering, strong::SN3D:: normalisation) to strong::Gerzon:: (aka strong::Furse-Malham::) ordering, strong::MaxN:: normalisation.


note::
Requires a device firmware update to link::https://www.zoom-na.com/products/field-video-recording/field-recording/zoom-h2n-handy-recorder#downloads#H2n System Version 2.00:: or higher. Set the link::https://www.zoom-na.com/products/field-video-recording/field-recording/zoom-h2n-handy-recorder##ZoomH2n:: to record in the code::SPATIAL AUDIO:: mode. Further details may be reviewed in the manual addendum link::https://www.zoom.co.jp/sites/default/files/products/downloads/pdfs/H2n_Ver2_OPmanual_E.pdf##found here::. You may also like to review the link::https://youtu.be/njep5CO3w3g##H2n: Spatial Audio Setup:: video. footnote::These last two links are best opened in a browser window:
code::
[
	"https://www.zoom.co.jp/sites/default/files/products/downloads/pdfs/H2n_Ver2_OPmanual_E.pdf",
	"https://youtu.be/njep5CO3w3g"
].do({arg item; item.openOS})
:: ::
::



METHOD:: newAtoB
A-format to B-format encoder. Encodes to a variety of tetrahedral orientations and W channel weights.


argument:: orientation
Orientation of the A-format tetrahedron.

table::
## strong::orientation:: || strong::angles:: ([theta, phi] in degrees)
## code::'flu':: || code:: [[45.0,  35.3], [-45.0, -35.3], [135.0, -35.3], [-135.0,  35.3]] ::
## code::'fld':: || code:: [[45.0, -35.3], [-45.0 , 35.3], [135.0,  35.3], [-135.0, -35.3]] ::
## code::'flr':: || code:: [[54.7,   0.0], [-54.7,   0.0], [180.0,  54.7], [ 180.0, -54.7]] ::
## code::'fud':: || code:: [[ 0.0,  54.7], [  0.0, -54.7], [125.7,   0.0], [-125.7,   0.0]] ::
## code::'fbd':: || code:: [[ 0.0,   0.0], [180.0, -70.5], [112.2,  28.1], [-112.2,  28.1]] ::
## code::'fbu':: || code:: [[ 0.0,   0.0], [180.0,  70.5], [112.2, -28.1], [-112.2, -28.1]] ::
## code::'flru':: || code:: [[67.8,  28.1], [-67.8,  28.1], [  0.0, -70.5], [ 180.0,   0.0]] ::
## code::'flrd':: || code:: [[67.8, -28.1], [-67.8, -28.1], [  0.0,  70.5], [ 180.0,   0.0]] ::
::

argument:: weight
The W weight factor.

For convenience, equivalent virtual microphone strong::pattern:: and decoding strong::k:: are also listed.

table::
## strong::weight:: || strong::kind:: || strong::W scale:: || strong::virtual microphone:: || strong::pattern:: || strong::decoding:: || strong::k::
## code::'dec':: || Decorrelated (on the sphere) || 1/sqrt(3) || Hyper-cardioid || 0.75 || strict soundfield || code::'velocity'::
## code::'can':: || Canonical (B-format) || 1/sqrt(2) || ||sqrt(6)/(1+sqrt(6)) || || sqrt(2/3)
## code::'uns':: || Unscaled || 1 || Super-cardioid || (3-sqrt(3))/2 || energy optimised || code::'energy'::
## code::'car':: || Cardioid || sqrt(3) || Cardioid || 0.5 || controlled opposites || code::'controlled'::
::


discussion::
The A-format encoder is often used in conjunction with the link::Classes/FoaDecoderMatrix#*newBtoA:: B-format decoder to form signal processing networks which preserve the spatial encoding as is described link::Classes/FoaDecoderMatrix#btoadiscuss#here::.

On its own, link::#*newAtoB:: is often used to author immersive, periphonic (3D) decorrelated soundfields.


METHOD:: newHoa1
A first order link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats##Ambisonic format exchange:: encoder. Encodes a variety of formats to traditional B-format.

argument:: ordering
Input Ambisonic channel component ordering.

table::
## strong::ordering:: || strong::kind::
## code::'acn':: || Ambisonic Channel Number (ACN)
## code::'sid':: || Single Index Designation (SID)
::

argument:: normalisation
Spherical harmonic normalisation method.

table::
## strong::normalisation:: || strong::kind::
## code::'n3d':: || Orthonormal basis for 3D decomposition (N3D)
## code::'sn3d':: || Semi-normalised basis for 3D decomposition (SN3D)
::


discussion::
Encoding means encoding from one Ambisonic channel componenent orderding and normalisation to that of traditional B-format. In other words, from some standard scheme to strong::Gerzon:: (aka strong::Furse-Malham::) ordering with strong::MaxN:: normalisation.

note::code::Hoa1:: in the method name link::#*newHoa1:: refers to Higher Order Ambisonic (HOA) encoding format, Ambisonic order = 1. The input signal should have four channels, with the given encoding format as specified in the arguments.::


METHOD:: newAmbix1
A first order link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats##Ambisonic format exchange:: encoder. Encodes from AmbiX to traditional B-format. A convenience alias to  link::#*newHoa1::.

discussion::
Encoding means encoding from one Ambisonic channel componenent orderding and normalisation to that of traditional B-format. In this case, from AmbiX encoding scheme (strong::ACN:: ordering, strong::SN3D:: normalisation) to strong::Gerzon:: (aka strong::Furse-Malham::) ordering, strong::MaxN:: normalisation.


SUBSECTION:: Matrix & File

COPYMETHOD:: FoaMatrix, *newFromMatrix


METHOD:: newFromFile
Create an FoaEncoderMatrix by loading a matrix from a file.

argument:: filePathOrName
Can be a path relative to your code::/extensions/matrices/FOA/encoders:: folder:
code::
Atk.getMatrixExtensionSubPath(\FOA, \encoders).fullPath
::
Otherwise a full path to your matrix file.

discussion::
See the link::Guides/Guide-to-ATK-Matrix-Files:: for more information.



INSTANCEMETHODS::
private:: init2D, init3D, initInv2D, initInv3D, initAtoB, initOmni, initDirection, initStereo, initQuad, init5_0, init7_0, initDirections, initPanto, initPeri, initZoomH2, initHoa1, initAmbix1, initZoomH2n, printOn, initEncoderVarsForFiles

SUBSECTION:: Information

COPYMETHOD:: FoaMatrix, -info

COPYMETHOD:: FoaMatrix, -order

COPYMETHOD:: FoaMatrix, -set

METHOD:: type
returns:: code::'encoder'::

COPYMETHOD:: AtkMatrix, -op

METHOD:: kind
Answers the kind of encoder.

discussion::

code::
// encoder
~encoder = FoaEncoderMatrix.newQuad

// inspect
~encoder.kind
::

code::
// encoder
~encoder = FoaEncoderMatrix.newPeri

// inspect
~encoder.kind
::


METHOD:: dim

Answers the number of encoder dimensions: 2D or 3D.

discussion::

code::
// encoder
~encoder = FoaEncoderMatrix.newQuad

// inspect
~encoder.dim
::

code::
// encoder
~encoder = FoaEncoderMatrix.newPeri

// inspect
~encoder.dim
::



METHOD:: numChannels
Answers the number of input channels (virtual loudspeakers or microphones).

discussion::

code::
// encoder
~encoder = FoaEncoderMatrix.newQuad

// inspect
~encoder.numChannels
::

code::
// encoder (two rings of 6)
~encoder = FoaEncoderMatrix.newPeri(6)

// inspect
~encoder.numChannels
::



METHOD:: dirChannels
Answers the direction of virtual loudspeaker or microphone feeds, with angles in radians.

returns:: A rank 1 array for pantophonic, and rank 2 array for periphonic. E.g.,
code::
// 2D:
[ theta0, theta1, ... thetaN ]
::
code::
// 3D
[ [ theta0, phi0 ], [ theta1, phi1 ], ... [ thetaN, phiN ] ]
::

code::
// encoder
~encoder = FoaEncoderMatrix.newQuad

// inspect
~encoder.dirChannels.raddeg
::

code::
// encoder (two rings of 6)
~encoder = FoaEncoderMatrix.newPeri(6)

// inspect
~encoder.dirChannels.raddeg
::


COPYMETHOD:: FoaMatrix, -directions


METHOD:: numInputs
A synonym for link::#-numChannels::


METHOD:: dirInputs
A synonym for link::#-dirChannels::


METHOD:: numOutputs
Answers the number of outputs for the encoder. 3 for 2D and 4 for 3D.


METHOD:: dirOutputs
A convenience method providing polymorphism with link::Classes/FoaDecoderMatrix#-dirOutputs::.

returns::

list::
## for 2D: code:: [ inf, inf, inf ] ::
## for 3D: code:: [ inf, inf, inf , inf ] ::
::


SUBSECTION:: Matrix

COPYMETHOD:: AtkMatrix, -matrix

COPYMETHOD:: AtkMatrix, -asArray


SUBSECTION:: File handling

COPYMETHOD:: AtkMatrix, -fileName

COPYMETHOD:: AtkMatrix, -filePath

COPYMETHOD:: AtkMatrix, -fileParse

COPYMETHOD:: AtkMatrix, -writeToFile


EXAMPLES::

link::Guides/Encoding-FOA::
