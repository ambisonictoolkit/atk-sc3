TITLE:: HoaXformMatrix
summary:: Matrix transformer from the Ambisonic Toolkit (ATK)
categories:: Libraries>Ambisonic Toolkit>UGens>HOA>Transformer, UGens>Multichannel>Ambisonics
related:: Classes/Mix, Classes/AtkMatrixMix, Classes/HoaRenderMatrix, Classes/HoaEncodeMatrix, Classes/HoaDecodeMatrix

DESCRIPTION::

Transform a Higher Order Ambisonic signal (HOA) via an link::Classes/HoaMatrixXformer::.


CLASSMETHODS::

METHOD:: ar

ARGUMENT:: in
The input signal, an array.

ARGUMENT:: hoaMatrix
An instance of link::Classes/HoaMatrixXformer::.

discussion::

Signals are decoded from the emphasis::reference radius::.


EXAMPLES::

subsection:: Mirror

This example is equivalent to mirroring via link::Classes/HoaReflect::.

Encode six sinusoids on the axes, then reflect across the origin.

code::
// simple test...

// boot rt server
s.boot;

// choose Ambisonic order
~order = 1
~order = 2
~order = 3

// choose an outbus, if need be
~outbus = 0

// open scope
s.scope(~order.asHoaOrder.size, ~outbus);

// design encoding matrix
~directions = [ [0.0, 0.0], [90.0, 0.0], [180.0, 0.0], [-90.0, 0.0], [0.0, 90.0], [0.0, -90.0], ].degrad;
~matrixEncoder = HoaMatrixEncoder.newDirections(~directions, order: ~order);

// design mirroring matrix
~matrixXformer = HoaMatrixXformer.newReflect(\reflect, ~order);


// freqs
~freqs = Array.series(~directions.size, 110.0, 110.0);
~amps = Array.series(~directions.size, 1, 1).reciprocal;

// audition
(
{
	var gain = -18;

	var sig, hoa;

	sig = SinOsc.ar(~freqs, mul: gain.dbamp * ~amps);

	hoa = HoaEncodeMatrix.ar(sig, ~matrixEncoder);

	HoaXformMatrix.ar(hoa, ~matrixXformer);

}.play(outbus: ~outbus)
)

// quit rt server
s.quit
::
