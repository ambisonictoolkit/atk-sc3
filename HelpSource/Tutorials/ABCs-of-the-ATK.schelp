title:: ABCs of the ATK
summary:: Ambisonic Toolkit, a library for soundfield research, analysis, synthesis and composition
categories:: Libraries>Ambisonic Toolkit
keyword::Atk

section:: Introduction

The Ambisonic Toolkit (ATK) aspires to offer a robust and well documented research grade library of tools for the SuperCollider user.

subsection:: Two toolsets in one

These tools are organized into two sets.

The first of these is modelled after the hardware footnote::See: link::https://en.wikipedia.org/wiki/List_of_Ambisonic_hardware##List of Ambisonic hardware:: :: and software tools offered in the world of classic, aka Gerzonic, emphasis::First Order Ambisonics:: (FOA), footnote::Some authors use the acronym POA, for emphasis::plain old Ambisonics::.:: while the second is framed as a modern emphasis::Near-Field Controlled Higher Order Ambisonic:: (NFC-HOA) solution.

Moving between these sets is facilited through parallel tools for both FOA and HOA, and documentation on link::#Exchanging formats#exchanging Ambisonic signals:: between these two link::#Encoding formats#Ambisonic encoding conventions::.

The tools are provided as open building blocks for Ambisonic workflows, signal synthesis and processing. The HOA toolset, in particular, is weighted towards providing emphasis::resources:: for implementations and emphasis::design patterns:: rather than multiple, closed black box solutions. footnote::For example, given a design for a stereo reverb, the ATK provides the pieces necessary to emphasis::Ambisonic-ize:: that design.::


subsection:: Theory & practice

The ATK is solidly built upon a firm foundation of direct calculation of Ambisonic encoding coefficients. Since the inclusion footnote::https://github.com/supercollider/supercollider/releases/tag/Version-3.10.0:: of link::Guides/Tour-of-Special-Functions##Special Functions:: from the link::https://www.boost.org/##Boost library::, fast coefficient calucations are available in both sclang and on the sound synthesis server.

In library solutions for a complete Ambisonic workflow are available either directly, or are otherwise documented. footnote::Are we missing something? link::Guides/ATK-FAQs#How%20do%20I%20request%20a%20guide%20or%20tutorial?#Let us know!:: ::


subsection:: Learning

An expanding collection of link::Overviews/ABCs-Guides-Toots##verbose guides and tutorial:: is provided to facilitate learning Ambisonic and ATK emphasis::use patterns::. Users are invited to help expand this documention through both link::Guides/ATK-FAQs#How%20do%20I%20request%20a%20guide%20or%20tutorial?#requesting:: and link::Guides/ATK-FAQs#How%20do%20I%20submit%20a%20guide%20or%20tutorial?#submitting:: guides and tutorials.



section:: The paradigm

The ATK brings together a number of classic and novel tools and transforms for the artist working with Ambisonic surround sound and makes these available to the SuperCollider user. The toolset in intended to be both ergonomic and comprehensive, and is framed so that the user is encouraged to emphasis::think Ambisonically::. By this, it is meant the ATK addresses the holistic problem of creatively controlling a complete soundfield, allowing and encouraging the artist to think beyond the placement of sounds in a sound-space (sound-scene paradigm). Instead the artist is encouraged to attend to the impression and imaging of a soundfield, therefore taking advantage of the native soundfield-kernel paradigm the Ambisonic technique presents.

The ATK's production model is illustrated below:

image::atknetwork.png#ATK paradigm::

Here you'll see that the ATK breaks down the task of working with Ambisonics into three separate elements:

definitionlist::
## Author || Capture or synthesise an Ambisonic soundfield.
## Image || Spatially filter an Ambisonic soundfield.
## Monitor || Playback or render an Ambisonic soundfield.
::

subsection:: Features

Some notable features of the ATK include:

list::
## Integrated support for classic emphasis::First Order Ambisonics (FOA):: and modern emphasis::Higher Order Ambisonics (HOA)::.
## Implements the emphasis::Near-Field Controlled::, aka emphasis::Near-Field Compensated::, form of higher order Ambisonics (NFC-HOA).
## Ambisonic order is merely limited by system speed, channel capacity and numerical precision rather than by design. footnote::Caveat: link::Guides/ATK-FAQs#What%20is%20the%20highest%20order%20supported%20for%20spherical%20decomposition?#What is the highest order supported for spherical decomposition?:: ::
## Control and synthesis of the near-field effect (NFE) of finite distance sources in both FOA and HOA, including radial beamforming.
## Soundfield feature sensing & analysis in instantaneous and time averaged forms.
## Ambisonic coefficients and matrices are available for inspection and manipulation in the interperter.
## Angular domain soundfield decomposition and recomposition.
## Analysis of transformer and decoder matrices.
::


section:: Installation

strong::Instructions:: for installing the complete system are found link::https://github.com/ambisonictoolkit/atk-sc3/blob/master/README.md#installing#HERE::. <-- click link!

If you're reading this document at least emphasis::one:: part of the ATK, the link::https://github.com/ambisonictoolkit/atk-sc3##atk-sc3 quark:: has most likely been corectly installed.


note::
If the link::Classes/HelpBrowser:: doesn't navigate to the section of the quark README titled
strong::Installing::, just search link::https://github.com/ambisonictoolkit/atk-sc3/blob/master/README.md#installing#the page:: to find.
::

subsection:: Components

The complete ATK library is built of a number of components. These are:

list::
## link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens::, classes, extension methods and documentation found in the link::https://github.com/ambisonictoolkit/atk-sc3##atk-sc3 quark::
## ATK UGens found in link::https://github.com/supercollider/sc3-plugins/releases##sc3-plugins::
## link::http://www.ambisonictoolkit.net/download/kernels/##kernels::, link::http://www.ambisonictoolkit.net/download/matrices/##matrices:: & link::http://www.ambisonictoolkit.net/download/recordings/##soundfiles:: found in the link::https://github.com/ambisonictoolkit##ATK repository::
::

note::
Except for the link::http://www.ambisonictoolkit.net/download/recordings/##soundfiles::, all of these components are required!
::

If you've successfully completed the steps described link::#Installation#above::, you should have a working installation of the ATK. Let's review each of these:

definitionlist::
## quark ||
We can easily inspect the strong::quark:: and installed quark dependencies via the link::Classes/QuarksGui:::

code::
QuarksGui.new
::

Though we already know the answer, we can also run this test:

code::
(
("The ATK quark component % installed!").format(
	Quarks.isInstalled("atk-sc3").if({
		"is"
	}, {
		"isn't"
	})
).postln
)
::

If the strong::quark:: has been installed in code::Quarks.folder::, we can poke about:

code::
(Quarks.folder +/+ "atk-sc3").openOS
::

## sc3-plugins ||
Similarly, if the UGens found in strong::sc3-plugins:: have been installed in code::Platform.userExtensionDir:::

code::
(Platform.userExtensionDir +/+ "SC3plugins/ATK").openOS
::

## kernel, matrices & soundfiles ||
And, if the strong::kernels::, strong::matrices:: and strong::soundfiles:: have
been installed in each related user directories, we can inspect:

code::
(
Atk.userKernelDir.openOS;
Atk.userMatrixDir.openOS;
Atk.userSoundsDir.openOS;
)
::
::


section:: Suggested extensions

Users can expand the functionality of the ATK by adding additional extensions. The following are suggested.

subsection:: ADT

The link::https://gitlab.com/dxarts/projects/adt.quark##ADT quark:: offers a convenient interface to the link::https://bitbucket.org/ambidecodertoolbox/adt/src/master/##Ambisonic Decoder Toolbox::, a collection functions for creating Ambisonic decoders. The interface supplied by the quark has been designed to facilitate use with the ATK.

At the time of this writing, the link::https://gitlab.com/dxarts/projects/adt.quark##ADT quark:: has not yet been included the SuperCollider link::https://github.com/supercollider-quarks/quarks/blob/master/directory.txt##Quark directory::, meaning that the link::Classes/QuarksGui:: cannot be used to install.

You can install the quark:

code::
Quarks.install("https://gitlab.com/dxarts/projects/adt.quark")
::

You'll then need to complete the installation by installing link::https://bitbucket.org/ambidecodertoolbox/adt/src/master/##Ambisonic Decoder Toolbox:: library and link::https://www.gnu.org/software/octave/##Octave::.

Follow the instructions found link::https://gitlab.com/dxarts/projects/adt.quark#adt#here::.


subsection:: AmbiVerbSC

Everyone loves reverb! Built with the ATK, the link::https://github.com/JamesWenlock/AmbiVerbSC##AmbiVerbSC quark:: provides a native first order Ambisonic tank style reverb algorithm.

As with the link::https://gitlab.com/dxarts/projects/adt.quark##ADT quark::, the link::https://github.com/JamesWenlock/AmbiVerbSC##AmbiVerbSC quark:: has not yet been included the SuperCollider link::https://github.com/supercollider-quarks/quarks/blob/master/directory.txt##Quark directory::.

To install the quark:

code::
Quarks.install("https://github.com/JamesWenlock/AmbiVerbSC")
::



section:: Related packages

Support for Ambisonics within SuperCollider has existed in a variety of forms over the years. The principal form of this support has been via link::Guides/UGens-and-Synths##unit generators:: supplied for emphasis::monophonic source:: encoding footnote::I would describe this as panning, or emphasis::basic:: encoding.:: and two dimensional, aka emphasis::pantophonic::, decoding.

Over the years, a number of related but different emphasis::Ambisonic encoding formats:: have been used. (These formats are discussed in more detail, link::#Encoding%20formats#below::.) For now, the thing to keep in mind is that when we use tools from multiple packages, we need to be sure to correctly exchange Ambisonic encoding formats where these differ.

When you've fully completed the link::#Installation#installation:: of the ATK, you'll automagically also have two other packages installed, the link::#SuperCollider#SuperCollider builtins:: footnote::Actually, already include as part of SuperCollider.:: and those found in link::#JoshUGens::. The other two, link::#AmbIEM:: and link::#SC-HOA:: require additional steps.

For ease of comparison, the UGens supplied by each package are listed according to the ATK's link::#Ambisonic UGen types#UGen classification convention::. (In this text we'll refer to a particular Ambisonic UGen as a strong::type:: of Ambisonic UGen.)

Any additional utitilities or functionality supplied by these packages are not discussed here.

note::
At the time of this writing, ATK namespace collisions with the four packages listed here emphasis::have not:: been observed. As a result, it emphasis::should:: be possible to configure a system with all the below installed.

If at some point you find a collision with the below packages (or any other), please let us know: link::Guides/ATK-FAQs#How%20do%20I%20report%20a%20bug?#How do I report a bug?::
::


subsection:: SuperCollider

The original author of SuperCollider has provided basic support for First Order Ambisonics (FOA) via the following unit generators:

definitionlist::
## Encoder || link::Classes/PanB::, link::Classes/PanB2::, link::Classes/BiPanB2:: footnote::link::Classes/BiPanB2:: doesn't synthesize the z-axis component.::
## Transformer || link::Classes/Rotate2::
## Decoder || link::Classes/DecodeB2::
::

Many SuperCollider users have been introduced to Ambisonics through experimentation
with these UGens.

(Follow link::#SCEncodingFormat#this link:: to review SuperCollider's encoding format.)


subsection:: JoshUGens

As with the ATK, the link::https://github.com/supercollider/sc3-plugins/tree/master/source/JoshUGens##JoshUGens:: collection is also distributed via link::https://github.com/supercollider/sc3-plugins/releases##sc3-plugins::, and offers further implementations in first and second order Ambisonic forms.

The following unit generators are supplied:

definitionlist::
## Encoder || link::Classes/BFEncode::, link::Classes/BFEncode1::, link::Classes/BFEncode2::, link::Classes/BFEncodeSter::, link::Classes/FMHEncode0::, link::Classes/FMHEncode1::, link::Classes/FMHEncode2::, link::Classes/A2B::, link::Classes/UHJ2B::, link::Classes/UHJtoB::
## Transformer || link::Classes/BFManipulate::, link::Classes/Rotate::, link::Classes/Tilt::, link::Classes/Tumble::, link::Classes/BFFreeVerb::, link::Classes/BFGVerb:: footnote::Supplied reverbs are listed as strong::transformers::, with the intention of bringing them to the reader's attention. Strictly speaking, the ATK's link::#Ambisonic UGen types#classification convention:: regards Ambisonic in Ambisonic out reverb and other effects as beyond the scope of the ATK.::
## Decoder || link::Classes/BFDecode::, link::Classes/BFDecode1::, link::Classes/FMHDecode1::, link::Classes/B2Ster::, link::Classes/B2A::, link::Classes/B2UHJ::, link::Classes/BtoUHJ::
::

One of the authors of the link::https://github.com/supercollider/sc3-plugins/tree/master/source/JoshUGens##JoshUGens:: package is a significant contributor to the ATK.

(Follow link::#JoshUGensEncodingFormat#this link:: to review JoshUGens's encoding format.)

note::
The authors consider it appropriate to regard the functionality provided by corresponding link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens:: and UGens found in strong::JoshUGens:: to be superceeded by that provided by the ATK.

E.g., rather than using strong::JoshUGens:: link::Classes/B2UHJ:: (or link::Classes/BtoUHJ::), users should employ the ATK's UHJ implementation: link::Classes/FoaDecoderKernel#*newUHJ::.
::


subsection:: AmbIEM

The link::https://sonenvir.at/downloads/sc3/ambiem/##AmbIEM library:: is distributed via the link::https://github.com/supercollider-quarks/AmbIEM##AmbIEM quark::, and offers support for first, second and third order Ambisonic tools.

If you've installed this quark you can search for the link::search#AmbIEM#AmbIEM:: overview page, or navigate to the library's distributed link::Browse#Libraries>AmbIEM#Help::.

AmbIEM supplies the following unit generators:

definitionlist::
## Encoder || PanAmbi1O, PanAmbi2O, PanAmbi3O
## Transformer || RotateAmbi1O, RotateAmbi2O, RotateAmbi3O
## Decoder || DecodeAmbi2O, DecodeAmbi3O, BinAmbi3O
::

(Follow link::#AmbIEMEncodingFormat#this link:: to review AmbIEM's encoding format.)

note::
The kernels required for binaural decoding via BinAmbi30 are not distributed via the link::https://github.com/supercollider-quarks/AmbIEM##AmbIEM quark::.

At the time of this writing, the suggested link::https://github.com/supercollider-quarks/AmbIEM/blob/master/Classes/Binaural.sc#L115#link found in the source code:: appears to be broken.

Instead, the currently live link to this dependency, code::full.tar.Z::, appears to be link::https://sound.media.mit.edu/resources/KEMAR.html##here::.
::


subsection:: 3Dj

Developed in collaboration with link::http://www.barcelonamedia.org/##Barcelona Media::, the 3Dj library is distributed via the link::https://github.com/supercollider-quarks/3Dj##3Dj quark::. footnote::See also: https://github.com/andresperezlopez/rt-spatialization:: Support is offered for first, second and third order Ambisonics.

If you've installed this quark you can search for the link::search#Introducing 3Dj#3Dj:: overview page, or navigate to the library's distributed link::Browse#Libraries>3Dj#Help::.

3Dj supplies the following unit generators:

definitionlist::
## Encoder || AmbEnc1, AmbEnc2, AmbEnc3, AmbMEnc1, AmbMEnc2, AmbMEnc3, AmbMrEnc1, AmbMrEnc2, AmbMrEnc3, AmbREnc1, AmbREnc2, AmbREnc3, AmbSMEnc1, AmbSMEnc2, AmbSMEnc3, AmbSMrEnc1, AmbSMrEnc2, AmbSMrEnc3, AmbXEnc1, AmbXEnc2, AmbXEnc3
::

(Follow link::#3DjEncodingFormat#this link:: to review 3Dj's encoding format.)


subsection:: SC-HOA

Like the ATK and JoshUGens, the SC-HOA library, aka HOA for SuperCollider, has components distributed via link::https://github.com/supercollider/sc3-plugins/tree/master/source/HOAUGens##sc3-plugins::. Additionally, for a full installation, the link::https://github.com/florian-grond/SC-HOA##SC-HOA quark::, which includes kernel assets, must also be installed. This library, built on link::http://www.sekisushai.net/ambitools/##ambitools::, provides comprehensive support for first through fifth footnote::HOABinaural supports up to seventh order.:: order Ambisonics.

If you've installed this quark you can search for the link::search#HOA%20Guide#HOA Guide:: overview page, or navigate to the library's distributed link::Browse#Libraries>HOA#Help::. SC-HOA includes tutorials, too, which will be link::search#HOA Tutorial#found here:: if installed.

SC-HOA provides the following footnote::documented or otherwise mentioned in tutorials:: user facing unit generators:

definitionlist::
## Encoder || HOAEncoder, HOAmbiPanner, HOALibEnc3D, HOAEncLebedev06, HOAEncLebedev26, HOAEncLebedev50, HOAEncEigenMike, HOAConvert
## Transformer || HOATransRotateAz, HOATransRotateXYZ, HOATransMirror, HOABeamHCard2Hoa, HOABeamDirac2Hoa, HOALibOptim
## Decoder || HOADec5_0, HOABeamHCard2Mono, HOABinaural, Lebedev50BinauralDecoder, HOADecLebedev06, HOADecLebedev26, HOADecLebedev50, HOAConvert
::

(Follow link::#SC-HOAEncodingFormat#this link:: to review SC-HOA's encoding format.)


section:: Ambisonic formats

For users new to the world of Ambisonics, perhaps one of the most confusing aspects is the use of the term emphasis::format::. This confusion is understandable, given how this word has been used differently over time and in different contexts.

One way this word is used is to describe the emphasis::Ambisonic encoding format::, aka the emphasis::encoding convention::, of an Ambisonic signal. Another use of the word is to describe the emphasis::spatial domain:: of an Ambisonic signal.

We'll consider each of these uses in the following two sub-sections.

subsection:: Encoding formats

Here we'll briefly review the emphasis::flavors of Ambisonics::.

If you haven't already, a great place to start with understanding encoding formats is to review:

list::
## link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats##Ambisonic data exchange formats::
::

Given an Ambisonic signal, there are four things we need to know for the emphasis::encoding format:: (or convention) to be completely specified and unambiguous. These are:

definitionlist::
## Ambisonic order || An integer describing the spatial resolution. Specifies the maximum emphasis::Associated Legendre:: degree, ℓ, of a given signal or coefficient set. We can think of emphasis::Ambisonic order:: as a emphasis::spatial sampling rate::.

## Ambisonic component ordering || Sorting or ordering convention applied to arrange spherical harmonic encoding coefficients and resulting signal sets. E.g., Furse-Malham (FuMa), Ambisonic Channel Number (ACN), Single Index Designation (SID). See link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Component_ordering#ordering::.

## Ambisonic component normalisation || emphasis::Spherical harmonic:: coefficient normalisation convention. E.g., maxN, N3D, SN3D. See link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Normalisation#normalisation::.

## Ambisonic reference radius || Encoding radius where all modal components are real. We can think of this as the radius at which the associated emphasis::virtual loudspeakers:: are found.
::

note::
Of these four quantities, many user facing Ambisonic software packages omit specifying a reference radius. If we would like to successfully synthesize soundfields with controlled near-field effects (NFE), this value must be specified and known.

The ATK measures this parameter in meters.
::

The ATK will report these details for the FOA implementation:

code::
AtkFoa.defaultOrder.postln;  // -> 1
AtkFoa.ordering.postln;  // -> fuma
AtkFoa.normalisation.postln;  // -> fuma
AtkFoa.refRadius.postln;  // -> inf
::

The ATK uses the normalisation indicator strong::FuMa:: as a synonym for strong::MaxN:: to indicate Furse-Malham normalisation in the form compatable with classic Gerzonic Ambisonic encoding.

And the HOA implementation:

code::
AtkHoa.defaultOrder.postln;  // -> 3
AtkHoa.ordering.postln;  // -> acn
AtkHoa.normalisation.postln;  // -> n3d
AtkHoa.refRadius.postln;  // -> 1.5
::

The very first, Ambisonic order, directly indicates the number of channels (or coefficients) and encoded signal will have. Order specifies the spatial resolution of the soundfield.

Here's the math to report the number of channels or coefficients:

code::
~order = AtkFoa.defaultOrder;
// ~order = AtkHoa.defaultOrder;

(~order + 1).squared.postln;
::

The ATK's HOA toolset offers another way of reporting the number of channels, through a method for link::Classes/HoaOrder:::

code::
~myOrder = 5;  // greater than the default!

~hoaOrder = HoaOrder.new(~myOrder);
~hoaOrder.size.postln;  // -> 36
::

Clearly, more channels means more spatial information, which means a soundfield with more spatial resolution.

________________

For convenience, the ATK uses the keyword strong::format:: to indicate component ordering and component normalisation, grouped together:

code::
AtkFoa.format.postln;  // -> [ fuma, fuma ]
AtkHoa.format.postln;  // -> [ acn, n3d ]
::

This use of the word format, to specify both ordering and normalisation, is the most common in the era of modern Ambisonics. Another modern practice is to use the word flavors and to speak of emphasis::flavors of Ambisonics::.

So, users often speak of a signal being encoded as ACN-N3D or ACN-SN3D, the latter being known as link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#AmbiX#AmbiX::.

We can also look up common encoding convention formats:

code::
~myOtherFormat = \ambix;  // AmbiX (Ambisonics exchangeable)
// ~myOtherFormat = \fuma;  // Furse-Malham

AtkHoa.formatDict[~myOtherFormat].postln;
::

________________

anchor::set::

The ATK uses another designation, strong::set::, to group all these features together. This can refer to an Ambisonic strong::signal:: or a strong::tool set::.

For instance a signal described as strong::HOA5:: is specified as:
anchor::HOA5::
definitionlist::
## strong::HOA5:: ||
list::
## strong::order:: : 5
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#ACN#ACN::
## strong::normalisation:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#N3D#N3D::
## strong::reference radius:: : 1.5 meters
::
::

________________

Let's now consider the emphasis::toolsets:: and emphasis::Ambisonic encoding formats:: provided by the above link::#Related%20packages#related packages:: (package names link to UGen lists, above):
anchor::SCEncodingFormat::
definitionlist::
## link::#SuperCollider:: ||
list::
## strong::order:: : 1
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Furse-Malham#FuMa::
## strong::normalisation:: : FuMa (aka link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#maxN#MaxN::) footnote::
MaxN indicates scaling is the same as classic, aka Gerzonic, first order Ambisonics. From link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#maxN#Wikipedia:::
note::
MaxN is used in the Furse-Malham format (with the exception of a -3dB correction factor for W, which makes it directly compatible with traditional B-Format).
::
::
## strong::reference radius:: : inf footnote::For classic, aka Gerzonic, the reference radius is infinity.::
::
::
anchor::JoshUGensEncodingFormat::
definitionlist::
## link::#JoshUGens:: ||
list::
## strong::order:: : 1, 2
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Furse-Malham#FuMa::
## strong::normalisation:: : FuMa (aka link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#maxN#MaxN::)
## strong::reference radius:: : inf
::
::
anchor::AmbIEMEncodingFormat::
definitionlist::
## link::#AmbIEM:: ||
list::
## strong::order:: : 1, 2, 3
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#SID#SID::
## strong::normalisation:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#SN3D#SN3D::
## strong::reference radius:: : inf footnote::Unspecified, presume emphasis::basic encoding:: is emphasis::planewave encoding::. This would mean the reference radius is infinity. On the other hand, the reference radius for the MIT KEMAR HRTF measurements this library uses for binaural decoding is 1.4 meters. Review link::https://sound.media.mit.edu/resources/KEMAR.html##this discussion::. ::
::
::
anchor::3DjEncodingFormat::
definitionlist::
## link::#3Dj:: ||
list::
## strong::order:: : 1, 2, 3
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#ACN#ACN::
## strong::normalisation:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#N3D#N3D::
## strong::reference radius:: : inf footnote::
Unspecified, presume emphasis::basic encoding:: is emphasis::planewave encoding::. This would mean the reference radius is infinity.
note::3Dj's use of the ATK's FOA binaural decoders supports this view.::
::
::
::
anchor::SC-HOAEncodingFormat::
definitionlist::
## link::#SC-HOA:: ||
list::
## strong::order:: : 1, 2, 3, 4, 5
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#ACN#ACN::
## strong::normalisation:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#N3D#N3D::
## strong::reference radius:: : 1.0 meters footnote::
SC-HOA is a SuperCollider wrapper for link::http://www.sekisushai.net/ambitools/##ambitools::.

From the documentation for ambitools (link: TBD):

"In the current implementation, these [encoding] filters are stabilized with near field compensation filter at radius r_spk = 1 m."

The value listed as the default strong::speaker_radius:: for the UGen HOAEncoder is 1.07 meters, however. (If the SC-HOA quark is installed installed, see Help document. Or, link::https://github.com/florian-grond/SC-HOA/blob/master/classes/HOAEncoder.sc#L2#source code::.)

In a personal communication to Joseph Anderson (cc: Florian Grond), dated Tuesday, 1 December 2020, Pierre Lecomte writes:

"I confirm that the near field and near field compensation filters are implemented in ambitools. The default near field compensation distance was set to r_spk=1.07 m, as it was the radius of the Lebedev spherical loudspeaker array I've built during my PhD."

note::
For our purposes, using either 1.0 or 1.07 meters will be fine for a one-way link::Guides/Format-Exchange#SC-HOA#format exchange::.::
warning::
If, however, we are planning to pass signals back and forth between SC-HOA (ambitools), it is best to use 1.07 meters. Otherwise there is the possibility of continually adding (or subtracting) proximity, which could easilty result in overflow. (That would be bad!)
::
::
::
::

________________

In reviewing the above, we can note:

definitionlist::
## SuperCollider || Encodes in the ATK's FOA encoding format, aka classic Gerzonic Ambisonics
## JoshUGens || Encodes first order in the ATK's FOA encoding format, but does not encode in the ATK's HOA encoding format
## AmbIEM || Does not encode in the ATK's HOA encoding format
## 3Dj || Nearly encodes in the ATK's HOA encoding format
## SC-HOA || Nearly encodes in the ATK's HOA encoding format
::

________________

anchor::Exchanging formats::

strong::Exchanging formats::

As you would expect, the ATK does facilitate emphasis::exchanging:: signals encoded with different conventions, so we can use all these libraries together if we'd like. We just need to take care to translate signals correctly for the given library.

Because the ATK uses the link::#Ambisonic UGen types#below convention :: to designate Ambisonic operations, we can consider the conversion of an strong::FOA:: signal to strong::HOA1:: in two different, but equivalent, ways:

list::
## emphasis::decode:: strong::FOA:: to strong::HOA1::
## emphasis::encode:: strong::HOA1:: from strong::FOA::
::

This operation is known as emphasis::format exchange::.

Review the practical examples found here: link::Guides/Format-Exchange::


subsection:: Domain formats

In this section we'll discuss emphasis::Ambisonic spatial domain formats::.

We'll start by reviewing the link::https://en.wikipedia.org/wiki/Oxford_University_Tape_Recording_Society##Oxford University Tape Recording Society (OUTRS):: tetrahedral recording experiment of 1971, briefly list the various emphasis::letter:: named Ambisonic domain formats found in the wild, and finish with the conventions the ATK has adopted to address this part of the Ambisonic puzzle.

________________

anchor::Tetrahedral Recording::
strong::Tetrahedral Recording::

We could suggest that Ambisonics began in 1971 with a series of articles entitled "Experimental Tetrahedral Recording". These were prepared by Michael Gerzon for the British magazine link::https://worldradiohistory.com/Archive-All-Audio/Studio-Sound.htm##Studio Sound::, footnote::The extracted articles can be link::https://intothesoundfield.music.ox.ac.uk/technical-papers##found here::, while scans of Studio Sound, Vol. 13 can be found here:
list::
## No. 8, pp 396-398 (August 1971): https://worldradiohistory.com/Archive-All-Audio/Archive-Studio-Sound/70s/Studio-Sound-1971-08.pdf
## No. 9, pp 472, 473 & 475 (September 1971): https://worldradiohistory.com/Archive-All-Audio/Archive-Studio-Sound/70s/Studio-Sound-1971-09.pdf
## No. 10, pp 510, 511, 513 & 515 (October 1971): https://worldradiohistory.com/Archive-All-Audio/Archive-Studio-Sound/70s/Studio-Sound-1971-10.pdf
::
::
and detailed an experimental recording made by Gerzon and the OUTRS. We can separate the constituent parts of this experiment into: strong::capture:: and then strong::reconstruct:: a soundfield, along with another problem to consider: strong::archiving::.

Let's open part one of the series:

code::
(
/*
Turn to page 2 & find

Figure 1: SKEW-TETRAHEDRAL LOUDSPEAKER LAYOUT
Figure 2: BASIC EXPERIMENTAL SET-UP
*/
"https://intothesoundfield.music.ox.ac.uk/sites/default/files/intothesoundfield/documents/media/tetrahedral_1.pdf".openOS
)
::

Figure 1, illustrates the arrangement of the loudspeakers, and the directions in which the cardioid microphones are pointed, the microphone emphasis::look directions::.

In figure 2, if we follow the bottom path of the network from FOUR MIKES through to TETRAHEDRAL SPEAKER LAYOUT, we see the complete pathway for strong::capture:: to strong::reconstruct::.

The four microphones feed the four associated loudspeakers, but are filtered by a block labelled COMMON MODE REDUCTION MATRIX. Gerzon explains:

"In the experiment, hypercardioids were simulated by using a common mode reduction circuit to reduce the common mode (i.e. omnidirectional) component of the four cardioid signals."

Rather than feeding the loudspeakers directly, the microphone polar responses are modified from cardioid to another, variable pattern. The matrix makes each microphone's spatial response more selective. (Look directions stay the same.) Also note, though not yet named so, the "common mode" to be reduced is B-format's W.

Here's a matrix corresponding to setting the variable resistor parameter, teletype::VR = 0.183 R::, which corresponds to a null in the synthesized microphone response pattern at approximately 125 degrees: footnote::
code::
/*
check beaming corresponding to Gerzon's discussion (page 4):

https://intothesoundfield.music.ox.ac.uk/sites/default/files/intothesoundfield/documents/media/tetrahedral_1.pdf
*/
// single beam decoder to check approximate null angle
~energy = HoaMatrixDecoder.newDirection(0, 0, \energy, 1)  // VR = 0.183 R (125.3deg null);
~energy.analyzeDirections([[ 0, 0 ], [ 0, 125.3.degrad ]]).energy.ampdb.postln;  // < --


// spherical design
~tdesign = TDesign.new(4, 2, 3);  // tetrahedron

// encoder
~cardToHoa1 = HoaMatrixEncoder.newSphericalDesign(
	~tdesign,
	\controlled,  // cardioid
	1
).matrix;

// decoder
~hoa1ToSuper = HoaMatrixDecoder.newSphericalDesign(
	~tdesign,
	\energy, // super-cardioid (VR = 0.183 R)
	1
).matrix;

// convert
~cardToSuper = ~cardToHoa1.mul(~hoa1ToSuper);  // VR = 0.183 R (125.3deg null)
~cardToSuper.round(0.01);  // round
::
::

code::
// Figure 3:
// FOUR-CHANNEL COMMON MODE REDUCTION MATRIX
// VR = 0.183 R
Matrix[
	[ 1.13, -0.13, -0.13, -0.13 ],
	[ -0.13, 1.13, -0.13, -0.13 ],
	[ -0.13, -0.13, 1.13, -0.13 ],
	[ -0.13, -0.13, -0.13, 1.13 ]
]
::

We can view this matrix as a mixer where each loudspeaker is fed by a mix from all the microphones. For instance, the buss feeding the loudspeaker in the front-left-up position consists of a mix of the named microphones: footnote::I'm using the ATK's naming convention. These names correspond to Gerzon's: list::
## front-left-up: Lf (left-front-ceiling)
## back-right-up: Rr (rear-right-ceiling)
## front-right-down: Rf (right-front-floor)
## back-left-down: Lr (left-rear-floor)
::
::

numberedlist::
## front-left-up: rescale by +1.09 dB
## back-right-up: rescale by -17.46 dB & invert polarity
## front-right-down: rescale by -17.46 dB & invert polarity
## back-left-down: rescale by -17.46 dB & invert polarity
::


link::https://intothesoundfield.music.ox.ac.uk/sites/default/files/intothesoundfield/images/page/3_calrec-4-plus-ric-good-gray_web.jpg##Here's a photo:: of OUTRS member Richard Cowderoy with the microphone array. footnote::These images are from a page titled: link::https://intothesoundfield.music.ox.ac.uk/tetrahedral-recording-session-images##Tetrahedral Recording Session Images::. You can review Thornton's review of the session, link::https://intothesoundfield.music.ox.ac.uk/tetrahedral-recording##here:: :: And link::https://intothesoundfield.music.ox.ac.uk/sites/default/files/intothesoundfield/images/media/18_31_guests_2-g-web.jpg##here's a photo:: of a listening session. (The upper two loudspeakers of the loudspeaker array are visible on the two ladders.)

For strong::archiving::, the four microphone signals are just directly recorded.

Regarding the microphones and associated matrixing, in part two Gerzon observes:

"A high degree of coincidence is desirable, as only then is it possible to obtain by a suitable matrixing of the four output signals emphasis::any:: possible cardioid or hypercardioid output pointing in emphasis::any:: possible direction."

Suggesting the emphasis::world of Ambisonics:: to come, Gerzon is observing that given a tetrahedral recording in the form described, alternate, virtual microphones with any (first order) pattern and look direction can be synthesized.

note::If we can synthesize virtual microphones pointing in new look directions, we can also generate feeds for loudspeakers placed in positions that emphasis::don't match:: the original microphone look directions!::

________________

anchor::Leter-formats::
strong::Letter-formats:: footnote::More properly described as link::https://en.wikipedia.org/wiki/Grapheme##grapheme::-formats.::

A significant amount of confusion regarding Ambisonic emphasis::domain formats:: arises from the fact that historically a variety of what we might call emphasis::letter-formats:: have arisen over time. footnote::Hodges offers a link::https://ambisonic.info/ambisonics/channels.html##very brief review::.::

The list below describes what most practitioners would expect to find a soundfield in the form of:

definitionlist::
## A-format || microphone capsule signals
## B-format || Ambisonic link::#Encoding formats#encoding format::
## C-format || consumer distribution form
## D-format || loudspeaker feeds
## E-format || never in wide use, related to strong::C-format::
## G-format || loudspeaker feeds: ITU 5.1
## P-format || angular domain decomposition
::

Ideally, the complete, full 3D soundfield is available for retrieval, and each letter is emphasis::just:: a different emphasis::domain encoding::.

Referring back to the link::#Tetrahedral%20Recording#OUTRS experiment:: and Gerzon's figure 2, we can only find two complete soundfield forms. These correspond to emphasis::A-format::, and are noted as being recorded as gain and EQ corrected microphone capsule feeds by FOUR-CHANNEL TAPE RECORDERS. The other format we see is emphasis::D-format::, the collection of the actual loudspeaker feeds.

If we're interested in exchanging tetrahedral recordings, however, we immediately have problems. Doh!

In part two, Gerzon states, "The four capsules should certainly lie within a sphere of 5 cm diameter, and preferably less, in order to ensure that phase effects do not upset the matrixing." Beginning with Gerzon's comment on capsule spacing, here's a short list of interrelated factors that must be either specified or compensate for to have a truely emphasis::exchangeable A-format:::

numberedlist::
## number of microphone capsules footnote::With a tetrahedron we have four, so this is known.::
## capsule offset(s) from true coincidence
## capsule look directions footnote::Gerzon appears to order these as: back-left-down, front-left-up, front-right-down, back-right-up. ::
## capsule polar response pattern(s) footnote::Cardioid. In practice polar response may be frequency dependent!::
## capsule frequency response(s)
::

Assuming we have a D-format intended to emphasis::directly feed:: loudspeakers given no further signal processing,footnote::A high bar, indeed!:: to have an emphasis::exchangable D-format:: we need to know:

numberedlist::
## number of loudspeakers
## loudspeaker distance(s) from array origin
## loudspeaker look directions footnote::Look from perspective of listener at the loudspeaker array origin.::
## capsule polar response pattern(s) used to create loudspeaker feeds footnote::Recall Gerzon uses the COMMON MODE REDUCTION MATRIX to change the polar patterns.::
## loudspeaker frequency response(s) footnote::If this has been corrected for.::
::

The remedy to these high demands for strong::capturing::, strong::reconstructing:: and strong::archiving:: tetrahedral recordings is strong::B-format::.

________________

anchor::Spatial Domains::
strong::Spatial Domains::

For the sake of a managable and simplied workflow, the ATK considers (complete) Ambisonic soundfields as existing in only two domain forms. footnote::See also: link::Guides/ATK-Glossary::.:: Spatial information is represented in terms of:

definitionlist::
## angular domain
|| emphasis::angular basis functions::
## spherical domain
|| emphasis::spherical basis functions::
::

The emphasis::angular basis functions:: have an unambiguous emphasis::look direction:: and are  are described as having a emphasis::beam shape::. footnote::These are virtual microphone response patterns!::

When we are encoding, or measuring, a soundfield in either of these domains, we are measureing how much the soundfield is emphasis::like:: a particular basis function.

The ATK uses the following convention to associate these domains with emphasis::letter-formats:::

definitionlist::
## A-format
|| Component or signal set in the emphasis::angular domain::, evenly distributed across the surface of the sphere in a emphasis::spherical design::. Within the context of the Ambisonic Toolkit, any required equalisation or radial filtering is expected to have been applied. In other words, the Ambisonic Toolkit views emphasis::A-format:: as a uniform spherical decomposition of the soundfield.
## B-format
|| Component or signal set in the emphasis::spherical domain::. In classic emphasis::first order Ambisonics::, aka Gerzonic, B-format indicates a signal encoded where Ambisonic order n = 1, and components are ordered and normalised by the (now named) Furse-Malham and MaxN conventions. emphasis::B-format:: is often used to indicate any Ambisonic signal set, without regard to Ambisonic order, component ordering or normalisation.
::

As discussed earlier and to facilitate workflows, the ATK prefers to refer to signals and tools as being part of a signal or tool link::#set::, as this designation completely disambiguates the problem.

Furthur updating the meaning of strong::HOA5:::
anchor::HOA5_domain::
definitionlist::
## strong::HOA5:: ||
list::
## strong::spatial domain:: : spherical
## strong::order:: : 5
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#ACN#ACN::
## strong::normalisation:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#N3D#N3D::
## strong::reference radius:: : 1.5 meters
::
::

To be encoded in the emphasis::spherical domain:: in the ATK workflow, an Ambisonic signal is emphasis::completely specified::. There are no ambiguities.

note::
Although many authors use the term emphasis::B-format:: as a shorthand to mean any signal in the emphasis::spherical domain:: regardless of link::#Encoding formats#Ambisonic encoding convention::, we feel this practice should be discouraged, as it is partly responsible for much of the confusion surrounding the word emphasis::format::.
::

In the ATK, emphasis::B-format:: is completely specified and means strong::FOA:::
anchor::FOA_domain::
definitionlist::
## strong::FOA:: ||
list::
## strong::spatial domain:: : spherical
## strong::order:: : 1
## strong::ordering:: : link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#Furse-Malham#FuMa::
## strong::normalisation:: : FuMa (aka link::https://en.wikipedia.org/wiki/Ambisonic_data_exchange_formats#maxN#MaxN::)
## strong::reference radius:: : inf
::
::

________________

anchor::sphericalDecomp::
strong::Spherical decomposition & recomposition::

We can characterize the task of moving from the emphasis::spherical domain:: to the emphasis::angular domain:: as one of uniform emphasis::spherical decomposition::. Moving in the opposite direction is emphasis::spherical recomposition::. footnote::Obviously, we can start with signals from scratch and use these to emphasis::compose:: a new soundfield. This is a common part of the soundfield synthesis workflow.::

As you would expect, to be completely disambiguated, any exchangable decomposition must have all link::#set:: features known and specified.

There are three more aspects that must be known. A emphasis::beam:: is a emphasis::window:: in the emphasis::spatial domain::. We can understand a single beam as a virtual microphone and/or a virtual loudspeaker. (Think of link::#Tetrahedral Recording#Gerzon's experiment::.)

Reviewing link::#Spatial Domains#the above::, beams of the same shape, but with differing look directions are collected as emphasis::angular basis functions:: to describe the soundfield in the emphasis::angular domain::, while emphasis::spherical harmonics:: are the collection used to describe the soundfield in the emphasis::spherical domain::.

We're representing the same information, but just in another way. This different emphasis::way of expression:: is the difference between these two spatial domains: two different sets of emphasis::spatial basis functions::.

So, to specify a collection of emphasis::angular basis functions::, we need to choose: footnote::Beams are formed at the reference radius. By including link::Classes/HoaNFCtrl:: in the graph, beams may be formed at emphasis::any:: radius.::

numberedlist::
## strong::number of beams::
## strong::beam look directions::
## strong::beam shape::
::

For HOA, the ATK uses link::Classes/TDesign:: to help us specify the first two features. Here we will find a link::https://en.wikipedia.org/wiki/Spherical_design##spherical t-design:: given some criteria:

code::
(
~order = 3;
~numChans = 24;
~tdesign = TDesign.newHoa(~numChans, order: ~order);
)
::

And... we can view!
code::
~tdesign.visualize;
::

We can directly associate the minimum emphasis::number of beams:: for a given Ambisonic order with a kind of angular spatial sampling rate. For instance, we get an error if we ask for too few beams:

code::
(
~order = 3;
~numChans = 16;
~tdesignFAIL = TDesign.newHoa(~numChans, order: ~order);
)
::

If this happens, we can easily find what designs are available:

code::
(
~order = 3;
~optimize = \energy;
// ~optimize = \spreadE;

~numPoints = TDesignLib.getHoaDesigns(~optimize, ~order).collect({ |des| des[\numPoints] });
)
::


The ATK's use pattern for decomposition looks like this:
code::
// design a matrix _decoder_
~beamShape = \basic;
~decoder = HoaMatrixDecoder.newSphericalDesign(~tdesign, ~beamShape, ~order);
::

And, recomposition is re-encoding:
code::
// design a matrix _encoder_
~encoder = HoaMatrixEncoder.newSphericalDesign(~tdesign, ~beamShape, ~order);
::

We can check:

code::
// create a decode-reencode matrix
~decodeEncode = ~decoder.matrix.mul(~encoder.matrix);

// test whether it is a diagonal
~decodeEncode.thresh2(-190.dbamp).isDiagonal.postln;

// view the diagonal coeffs (should be ones!)
~decodeEncode.getDiagonal.postln;

// check the number of inputs and outputs match the number of harmonics
~numCoeffs = ~order.asHoaOrder.size;
~decodeEncode.shape == [ ~numCoeffs, ~numCoeffs ];
::

You'll find further discission here: link::Guides/HOA-Spherical::.


section:: Library architecture

The help browsing hierarchy is formatted to illustrate the structure of the ATK from a user perspective.


subsection:: Getting Help

Let's briefly explore the presented categories. Following the links below will navigate the browser to places to find relevent documentation on the listed topic. Some of these links land on splash page overviews which include a brief description of help to be found in that section.

Casually explore the structure of the ATK by taking some time to navigate these links. (Use the browser back button to return to this page.)

definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit#Ambisonic Toolkit:: ||
definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit>ATK Platform & Configuration#ATK Platform & Configuration:: || various ATK system settings and configurations
## link::Overviews/ABCs-ATK-Coeffs##Coefficients & Theory:: || foundational ambisonic coefficients &c
## link::Overviews/ABCs-Guides-Toots##Guides & Tutorials:: || documents exploring how to use the ATK
## link::Browse#Libraries>Ambisonic Toolkit>Licensing#Licensing:: || licensing documents and notices
## Matrix & Kernel || classes returning matrices and kernels for use with
corresponding link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens::
definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit>Matrix & Kernel>FOA#FOA:: || emphasis::user facing:: classes for FOA
## link::Browse#Libraries>Ambisonic Toolkit>Matrix & Kernel>HOA#HOA:: || emphasis::user facing:: classes for HOA
## link::Browse#Libraries>Ambisonic Toolkit>Matrix & Kernel>Internals#Internals:: || base classes and other utilities note::only for the curious!::
::
## UGens || UGens and link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens::
definitionlist::
## FOA || emphasis::user facing:: FOA UGens and link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens::
definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit>UGens>FOA>Analyzer#Analyzer:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>FOA>Decoder#Decoder:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>FOA>Encoder#Encoder:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>FOA>Transformer#Transformer:: ||
::
## HOA || emphasis::user facing:: HOA UGens and link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGens::
definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit>UGens>HOA>Decoder#Decoder:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>HOA>Encoder#Encoder:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>HOA>Transformer#Transformer:: ||
::
## Internals || base classes and other utilities note::only for the curious!::
definitionlist::
## link::Browse#Libraries>Ambisonic Toolkit>UGens>Internals>FOA#FOA:: ||
## link::Browse#Libraries>Ambisonic Toolkit>UGens>Internals>HOA#HOA:: ||
::
::
## link::Overviews/ABCs-ATK-Utils##Utilities:: || emphasis::user facing:: high level utilities
definitionlist::
## FOA ||
::
::
::

________________

To make finding the ATK's emphasis::help overviews:: convenient, the titles of these pages all begin with teletype::ABCs::.

Try this: link::Search#abcs::


subsection:: Ambisonic UGen types

The ATK uses the keyword strong::type:: to designate Ambisonic emphasis::soundfield operations::.

UGens are classified:

definitionlist::
## Encoder ||
strong::receive::: emphasis::some:: signal

strong::return::: emphasis::spherical domain:: signal

## Transformer ||
strong::receive::: emphasis::spherical domain:: signal

strong::return::: emphasis::spherical domain:: signal

## Decoder ||
strong::receive::: emphasis::spherical domain:: signal

strong::return::: emphasis::some:: signal
::

note::
To be regarded as emphasis::encoded:: in the emphasis::spherical domain::, the signal and tools emphasis::must:: be in the same link::#set::.

In otherwords, an FOA signal emphasis::is not:: an HOA1 signal. See the discussion on link::#Exchanging formats#exchanging encoding formats::.
::

The ATK classifies UGens and related functions returning emphasis::soundfield operations:: in terms of expected emphasis::inputs:: and emphasis::outputs::. As a result we emphasis::only:: have three strong::types::.

________________

anchor::ATKscope::

As an aside, UGens offering Ambisonic emphasis::digital audio effects:: are outside the scope of the Ambisonic Toolkit.

E.g., the ATK emphasis::does not:: supply Ambisonic reverberators and granulators. Instead, the ATK supplies the emphasis::tools and infrastructure:: necessary to design and build Ambisonic reverberators and granulators. See, for instance link::#AmbiVerbSC::.


subsection:: Matrix & Kernel operations

As we've seen above, for a complete install the ATK requires the successful installation of all link::#Components#components::, which include strong::matrix:: and strong::kernel:: assests.

In the abstract mathy sense, Ambisonic emphasis::soundfield operations:: can be described as emphasis::Ambisonic soundfield kernel convolutions::. Sounds difficult!

It also sounds like the implementation of these strong::operations:: will require emphasis::convolution::. If you've been poking around the link::Browse#Libraries>Ambisonic%20Toolkit>UGens>Internals#UGen internals::, you'll have spotted: link::Classes/AtkKernelConv::. This is the little workhorse handling any required convolution.

The observant reader will also have noticed another UGen found in this location: link::Classes/AtkMatrixMix::. footnote::The HOA toolset uses link::Classes/HoaRenderMatrix::, instead.::

________________

Thankfully, Ambisonic operations can be simplified given two conditions:

numberedlist::
## the operation emphasis::does not:: require complex coefficients footnote::No imaginary numbers!::
## the operation emphasis::is not:: frequency dependent
::

If these two are met, the operation can be simplied as multiply and add, or emphasis::matrix mixing::. In other words, the operation can be represented as a matrix of real numbers.

This makes life much easier! footnote::Given a hardware mixer with enough channels (and sends and returns), these more simple matrix Ambisonic emphasis::soundfield operations:: can be implemented. Not necessarily convenient, but possible.::

If an ATK Ambisonic operation is implemented as a strong::kernel:: operation, we can expect this:

numberedlist::
## emphasis::may:: require complex coefficients
## emphasis::may:: be frequency dependent
## emphasis::will:: require more CPU resources
::

A related implication:

list::
## emphasis::expect:: a strong::kernel:: operation to return a more complex sounding outcome than a strong::matrix:: operation
::

For example, link::Classes/FoaEncoderKernel#*newSuper::, the ATK's link::https://en.wikipedia.org/wiki/Ambisonic_UHJ_format#Super_stereo#Ambisonic Super Stereo:: strong::kernel:: encoder is usually preferred over link::Classes/FoaEncoderMatrix#*newStereo::, the much more simple strong::matrix:: encoder.

________________

Aside from structuring the architecture, the ATK also uses the strong::matrix:: and strong::kernel:: keywords to:

numberedlist::
## designate Ambisonic UGens and associated classes
## answer strong::operation:: assets, i.e., the matrix or kernel
## answer the strong::operation::
::

Here are a few examples:

code::

// 1) names
HoaDecodeMatrix.postln;  // given an HOA signal and an HoaMatrixDecoder instance, decode
HoaMatrixDecoder.postln;  // answer HoaMatrixDecoder instance required for the above
::
code::
// 2) assets
HoaMatrixDecoder.newPanto(4).matrix.postln;  // return the matrix
::
code::
// 3) operation
HoaMatrixDecoder.newPanto(4).op.postln;  // the -op message returns...
::


subsection:: Kinds of operations

The keyword strong::kind:: is used to identify individual named operations, which is where we find the problem specific elements of the ATK.

As an example, let's review a specific class: link::Classes/HoaMatrixDecoder::. We can return a list of implemented HOA matrix decoders, listing the strong::kinds:: of decoders this class will design:

code::
~decoderClass = HoaMatrixDecoder;  // hoa matrix decoder designer

"% class implements:".format(~decoderClass).postln;
~decoderClass.class.dumpInterface;
::

The class methods listed here emphasis::are:: HOA matrix decoder design methods. When we instantiate an instance with one of these methods, we emphasis::design:: a matrix to be used for decoding.

Given an instance, we see that strong::kind:: returns the name of the design method used:

code::
(
~myMatrixDecoder = HoaMatrixDecoder.newPanto(4);  // 4 channel 3rd order decoder

"instance var: %".format("~myMatrixDecoder").postln;
"tool & signal set: %".format(~myMatrixDecoder.set).postln;
"soundfield operation: %".format(~myMatrixDecoder.op).postln;
"soundfield operation type: %".format(~myMatrixDecoder.type).postln;
"soundfield operation kind: %".format(~myMatrixDecoder.kind).postln;
)
::

Or, this and a bit more information, but in natural language:

code::
(
"% is an % instance, and is a % channel % % % designed with the % design method.".format(
	"~myMatrixDecoder",
	~myMatrixDecoder.class,
	~myMatrixDecoder.numChannels,
	~myMatrixDecoder.set,
	~myMatrixDecoder.op,
	~myMatrixDecoder.type,
	~myMatrixDecoder.kind,
).postln
)
::

Of course, if we'd like to review the strong::kinds:: of design methods available, we can also just visit the help page: link::Classes/HoaMatrixDecoder::.


subsection:: Static & dynamic operations

In finishing up our review of the structure of the ATK, we'll note that numerous soundfield operations are available in both emphasis::static:: and emphasis::dynamic:: forms. This is a direct result of link::Reference/ServerPluginAPI#Input%20rates
#SuperCollider's implementation as a Music V language::, and the requirement to provide direct access to operation coefficients for inspection.

Let's review a specific case: HOA beam decoding. A emphasis::beam decoder::, or link::https://en.wikipedia.org/wiki/Beamforming##beamformer::, extracts a single emphasis::beam:: from a soundfield. This soundfield operation is equivalant to sampling a soundfield with a single virtual microphone and returning the result.

If we link::Browse#Libraries>Ambisonic Toolkit>UGens>HOA>Decoder#browse:: to review the UGens for HOA decoding, we'll see two decoders listed:

definitionlist::
## link::Classes/HoaDecodeDirection:: || Higher Order Ambisonic (HOA) beam decoder
## link::Classes/HoaDecodeMatrix:: || Matrix renderer from the Ambisonic Toolkit (ATK)
::

The first of these, link::Classes/HoaDecodeDirection::, is the ATK's dynamic continuous rate HOA emphasis::beamformer:: :

code::
HoaDecodeDirection.ar(in, theta, phi, radius, beamShape: 'basic', order)
::

Reviewing the argument list, strong::theta::, strong::phi:: and strong::radius:: may all be varied continuously.

Turning to link::Classes/HoaDecodeMatrix::, we see:

code::
HoaDecodeMatrix.ar(in, hoaMatrix)
::

The matrix required as an argument emphasis::is not:: continuously variable. We design the matrix once with link::Classes/HoaMatrixDecoder:::

code::
HoaMatrixDecoder.newDirection(theta, phi, beamShape, order)
::

and then pass it to link::Classes/HoaDecodeMatrix::.

Putting this together, the equivalent beamforming use pattern looks like this:

code::
hoaMatrix = HoaMatrixDecoder.newDirection(theta, phi, beamShape, order);
HoaDecodeMatrix.ar(in, hoaMatrix)
::

and differs from the dynamic beamformer, link::Classes/HoaDecodeDirection::, in that strong::theta:: and strong::phi:: are static and fixed at initial design time, and we're missing strong::radius::.

________________

With a little bit of effort, we could construct a network that emphasis::would:: allow us to modulate strong::theta:: and strong::phi::. And we emphasis::could:: regain the radial functionality, too. footnote::We'd need to throw in link::Classes/HoaRTT:: (or link::Classes/HoaYPR::) and link::Classes/HoaNFCtrl::.:: However, given the ATK already supplies a dynamic HOA beamer, there's no point in doing so.

Well then, what is the point of working with link::Classes/HoaMatrix:: subclass instances?

In many cases, we don't actually want our matrix to be changing. When decoding for a real loudspeaker array we'll design the decoder just once. footnote::Our fixed single beam example is a special, degenerate, case.:: Another advantage is that we have access to quite a bit of further details for inspection:

list::
## link::Classes/HoaMatrixDecoder#Information::
## link::Classes/HoaMatrixDecoder#Matrix::
## link::Classes/HoaMatrixDecoder#Analysis::
::

In other words, the static strong::matrix:: and strong::kernel:: emphasis::soundfield operation:: implementations offer an open framework rather than the closed UGen blackboxes found with most composer facing Ambisonic libraries.

note::
This is one of the aspects of the ATK that sets it apart from the above link::#Related packages#related packages::. The ATK seeks to offer an open world, appropriate for both high and low level research into the analysis and synthesis of ambisonic soundfields and related topics.
::


subsection:: Toolset namespaces

As you'll have observed, the ATK uses a namespace convention to help navigate the component library classes. ScIDE's link::Guides/SCIde#Automatic%20completion#autocompletion:: is able help us find what we're looking for when we type in the link::Guides/SCIde#Code%20editor#code editor::.

Create a new document, and type each of the following, observing the choices offered by the autocompletion menu:

code::
Atk
::
code::
Foa
::
code::
Hoa
::

Rather than navigating the Help browsing structure, this is the way experienced users often find classes of interest.

Typing code::Foa:: quickly brings up classes in the FOA toolset whle code::Hoa:: returns parallel HOA classes. The code::Atk:: namespace organizes library level environment settings and base classes that serve both code::Foa:: and code::Hoa:: namespaces.

anchor::FvHdynamic::

strong::Foa vs Hoa: dynamic UGens::

The FOA toolset includes a link::Guides/WritingUGens#Pseudo-UGens#pseudo-UGen:: wrapper, link::Classes/FoaTransform::, which is intended to offer an interface for emphasis::dynamic:: transform operations, and parallels the interface for emphasis::static:: transform operations, link::Classes/FoaXform::.

In the development of the HOA toolset, we found link::Classes/FoaTransform:: to be rarely used. As a result, there is no code::HoaTransform::. Instead, UGens are accessed individually, by name:

code::
HoaRotate
::

anchor::FvHstatic::

strong::Foa vs Hoa: static UGens::

The FOA toolset's static UGens for encoding and decoding are:
list::
## link::Classes/FoaEncode::
## link::Classes/FoaDecode::
::

These receive emphasis::both:: FOA strong::matrix:: and strong::kernel:: instances.

The corresponding HOA UGens are: footnote::Both of these are synonyms for link::Classes/HoaRenderMatrix::.::
list::
## link::Classes/HoaEncodeMatrix::
## link::Classes/HoaDecodeMatrix::
::

As you would expect from the names, these emphasis::only:: receive HOA strong::matrix:: instances. footnote::
Why? Convolution in HOA is very easily high cost! In adopting a naming convention where the designed operation instance is in the name, the user is kept well aware of whether an inexpensive matrix or an expensive kernel operation is demanded.
::

anchor::FvHmatrix::

strong::Foa vs Hoa: matrix classes::

The naming pattern for equivalent matrix designers is swapped:

list::
## strong::SetTypeOperation:: for Foa
## strong::SetOperationType:: for Hoa
::

For example:

list::
## link::Classes/FoaDecoderMatrix::
## link::Classes/HoaMatrixDecoder::
::

This difference exists to more easily facilite the design of matrices for HOA. When we're designing an HOA matrix, we can think in natural language word order and the link::Guides/SCIde##IDE:: will quickly answer.


section:: What next?

Try:

list::
## link::Guides/ATK-FAQs::
## link::Tutorials/ATK-Enlightenment::
## link::Guides/ATK-Glossary::
## link::Overviews/ABCs-Guides-Toots::
## Have fun!
::
